/* WARNING: Initially autogenerated and then manually re-edited file */

#include "THC.h"
#include "luaT.h"
#include "utils.h"


static int cutorch_CudaTensor_zero(lua_State *L)
{
  int narg = lua_gettop(L);
  THCudaTensor *arg1 = NULL;
  int arg1_idx = 0;
  if(narg == 1 && (arg1 = (THCudaTensor *)luaT_toudata(L, 1, "torch.CudaTensor")))
  {
    arg1_idx = 1;
  }
  else
    luaL_error(L, "expected arguments: *CudaTensor*");
  lua_pushvalue(L, arg1_idx);
  THCudaTensor_zero(arg1);
  return 1;
}

static int cutorch_CudaTensor_fill(lua_State *L)
{
  int narg = lua_gettop(L);
  THCudaTensor *arg1 = NULL;
  int arg1_idx = 0;
  float arg2 = 0;
  if(narg == 2 && (arg1 = (THCudaTensor *)luaT_toudata(L, 1, "torch.CudaTensor")) && lua_isnumber(L, 2))
  {
    arg1_idx = 1;
    arg2 = (float)lua_tonumber(L, 2);
  }
  else
    luaL_error(L, "expected arguments: *CudaTensor* float");
  lua_pushvalue(L, arg1_idx);
  THCudaTensor_fill(arg1,arg2);
  return 1;
}

static int cutorch_CudaTensor_add(lua_State *L)
{
  int narg = lua_gettop(L);
  int argset = 0;
  THCudaTensor *arg1 = NULL;
  int arg1_idx = 0;
  float arg2 = 0;
  THCudaTensor *arg3 = NULL;
  int arg3_idx = 0;
  float arg4 = 1;
  THCudaTensor *arg5 = NULL;
  THCudaTensor *arg6 = NULL;
  int arg6_idx = 0;
  THCudaTensor *arg7 = NULL;
  float arg8 = 1;
  THCudaTensor *arg9 = NULL;
  if(narg == 2&& (arg1 = (THCudaTensor *)luaT_toudata(L, 1, "torch.CudaTensor"))&& lua_isnumber(L, 2))
  {
    argset = 1;
    arg1_idx = 1;
    arg2 = (float)lua_tonumber(L, 2);
  }
  else if(narg == 2
  && (arg3 = (THCudaTensor *)luaT_toudata(L, 1, "torch.CudaTensor"))
  && (arg5 = (THCudaTensor *)luaT_toudata(L, 2, "torch.CudaTensor"))
  )
  {
    argset = 2;
    arg3_idx = 1;
  }
  else if(narg == 3
  && (arg3 = (THCudaTensor *)luaT_toudata(L, 1, "torch.CudaTensor"))
  && lua_isnumber(L, 2)
  && (arg5 = (THCudaTensor *)luaT_toudata(L, 3, "torch.CudaTensor"))
  )
  {
    argset = 2;
    arg3_idx = 1;
    arg4 = (float)lua_tonumber(L, 2);
  }
  else if(narg == 3
  && (arg6 = (THCudaTensor *)luaT_toudata(L, 1, "torch.CudaTensor"))
  && (arg7 = (THCudaTensor *)luaT_toudata(L, 2, "torch.CudaTensor"))
  && (arg9 = (THCudaTensor *)luaT_toudata(L, 3, "torch.CudaTensor"))
  )
  {
    argset = 3;
    arg6_idx = 1;
  }
  else if(narg == 4
  && (arg6 = (THCudaTensor *)luaT_toudata(L, 1, "torch.CudaTensor"))
  && (arg7 = (THCudaTensor *)luaT_toudata(L, 2, "torch.CudaTensor"))
  && lua_isnumber(L, 3)
  && (arg9 = (THCudaTensor *)luaT_toudata(L, 4, "torch.CudaTensor"))
  )
  {
    argset = 3;
    arg6_idx = 1;
    arg8 = (float)lua_tonumber(L, 3);
  }
  else
    luaL_error(L, "expected arguments: *CudaTensor* float | *CudaTensor* [float] CudaTensor | *CudaTensor* CudaTensor [float] CudaTensor");
  
  if(argset == 1)
  {
    lua_pushvalue(L, arg1_idx);
    THCudaTensor_add(arg1,arg2);
    return 1;
  }
  else if(argset == 2)
  {
    lua_pushvalue(L, arg3_idx);
    THCudaTensor_cadd(arg3,arg4,arg5);
    return 1;
  }
  else if(argset == 3)
  {
    lua_pushvalue(L, arg6_idx);
    THCudaTensor_cadd_tst(arg6,arg7,arg8,arg9);
    return 1;
  }
  return 0;
}

static int cutorch_CudaTensor_mul(lua_State *L)
{
int narg = lua_gettop(L);
THCudaTensor *arg1 = NULL;
int arg1_idx = 0;
float arg2 = 0;
if(narg == 2
&& (arg1 = (THCudaTensor *)luaT_toudata(L, 1, "torch.CudaTensor"))
&& lua_isnumber(L, 2)
)
{
arg1_idx = 1;
arg2 = (float)lua_tonumber(L, 2);
}
else
luaL_error(L, "expected arguments: *CudaTensor* float");
lua_pushvalue(L, arg1_idx);
THCudaTensor_mul(arg1,arg2);
return 1;
}

static int cutorch_CudaTensor_div(lua_State *L)
{
int narg = lua_gettop(L);
THCudaTensor *arg1 = NULL;
int arg1_idx = 0;
float arg2 = 0;
if(narg == 2
&& (arg1 = (THCudaTensor *)luaT_toudata(L, 1, "torch.CudaTensor"))
&& lua_isnumber(L, 2)
)
{
arg1_idx = 1;
arg2 = (float)lua_tonumber(L, 2);
}
else
luaL_error(L, "expected arguments: *CudaTensor* float");
lua_pushvalue(L, arg1_idx);
THCudaTensor_div(arg1,arg2);
return 1;
}

static int cutorch_CudaTensor_cmul(lua_State *L)
{
int narg = lua_gettop(L);
THCudaTensor *arg1 = NULL;
int arg1_idx = 0;
THCudaTensor *arg2 = NULL;
THCudaTensor *arg3 = NULL;
if(narg == 2
&& (arg1 = (THCudaTensor *)luaT_toudata(L, 1, "torch.CudaTensor"))
&& (arg3 = (THCudaTensor *)luaT_toudata(L, 2, "torch.CudaTensor"))
)
{
arg1_idx = 1;
arg2 = arg1;
}
else if(narg == 3
&& (arg1 = (THCudaTensor *)luaT_toudata(L, 1, "torch.CudaTensor"))
&& (arg2 = (THCudaTensor *)luaT_toudata(L, 2, "torch.CudaTensor"))
&& (arg3 = (THCudaTensor *)luaT_toudata(L, 3, "torch.CudaTensor"))
)
{
arg1_idx = 1;
}
else
luaL_error(L, "expected arguments: *CudaTensor* [CudaTensor] CudaTensor");
lua_pushvalue(L, arg1_idx);
THCudaTensor_cmul(arg1,arg2,arg3);
return 1;
}

static int cutorch_CudaTensor_cdiv(lua_State *L)
{
int narg = lua_gettop(L);
THCudaTensor *arg1 = NULL;
int arg1_idx = 0;
THCudaTensor *arg2 = NULL;
THCudaTensor *arg3 = NULL;
if(narg == 2
&& (arg1 = (THCudaTensor *)luaT_toudata(L, 1, "torch.CudaTensor"))
&& (arg3 = (THCudaTensor *)luaT_toudata(L, 2, "torch.CudaTensor"))
)
{
arg1_idx = 1;
arg2 = arg1;
}
else if(narg == 3
&& (arg1 = (THCudaTensor *)luaT_toudata(L, 1, "torch.CudaTensor"))
&& (arg2 = (THCudaTensor *)luaT_toudata(L, 2, "torch.CudaTensor"))
&& (arg3 = (THCudaTensor *)luaT_toudata(L, 3, "torch.CudaTensor"))
)
{
arg1_idx = 1;
}
else
luaL_error(L, "expected arguments: *CudaTensor* [CudaTensor] CudaTensor");
lua_pushvalue(L, arg1_idx);
THCudaTensor_cdiv(arg1,arg2,arg3);
return 1;
}

static int cutorch_CudaTensor_addcmul(lua_State *L)
{
int narg = lua_gettop(L);
THCudaTensor *arg1 = NULL;
int arg1_idx = 0;
float arg2 = 1;
THCudaTensor *arg3 = NULL;
THCudaTensor *arg4 = NULL;
if(narg == 3
&& (arg1 = (THCudaTensor *)luaT_toudata(L, 1, "torch.CudaTensor"))
&& (arg3 = (THCudaTensor *)luaT_toudata(L, 2, "torch.CudaTensor"))
&& (arg4 = (THCudaTensor *)luaT_toudata(L, 3, "torch.CudaTensor"))
)
{
arg1_idx = 1;
}
else if(narg == 4
&& (arg1 = (THCudaTensor *)luaT_toudata(L, 1, "torch.CudaTensor"))
&& lua_isnumber(L, 2)
&& (arg3 = (THCudaTensor *)luaT_toudata(L, 3, "torch.CudaTensor"))
&& (arg4 = (THCudaTensor *)luaT_toudata(L, 4, "torch.CudaTensor"))
)
{
arg1_idx = 1;
arg2 = (float)lua_tonumber(L, 2);
}
else
luaL_error(L, "expected arguments: *CudaTensor* [float] CudaTensor CudaTensor");
lua_pushvalue(L, arg1_idx);
THCudaTensor_addcmul(arg1,arg2,arg3,arg4);
return 1;
}

static int cutorch_CudaTensor_addcdiv(lua_State *L)
{
int narg = lua_gettop(L);
THCudaTensor *arg1 = NULL;
int arg1_idx = 0;
float arg2 = 1;
THCudaTensor *arg3 = NULL;
THCudaTensor *arg4 = NULL;
if(narg == 3
&& (arg1 = (THCudaTensor *)luaT_toudata(L, 1, "torch.CudaTensor"))
&& (arg3 = (THCudaTensor *)luaT_toudata(L, 2, "torch.CudaTensor"))
&& (arg4 = (THCudaTensor *)luaT_toudata(L, 3, "torch.CudaTensor"))
)
{
arg1_idx = 1;
}
else if(narg == 4
&& (arg1 = (THCudaTensor *)luaT_toudata(L, 1, "torch.CudaTensor"))
&& lua_isnumber(L, 2)
&& (arg3 = (THCudaTensor *)luaT_toudata(L, 3, "torch.CudaTensor"))
&& (arg4 = (THCudaTensor *)luaT_toudata(L, 4, "torch.CudaTensor"))
)
{
arg1_idx = 1;
arg2 = (float)lua_tonumber(L, 2);
}
else
luaL_error(L, "expected arguments: *CudaTensor* [float] CudaTensor CudaTensor");
lua_pushvalue(L, arg1_idx);
THCudaTensor_addcdiv(arg1,arg2,arg3,arg4);
return 1;
}

static int cutorch_CudaTensor_dot(lua_State *L)
{
int narg = lua_gettop(L);
THCudaTensor *arg1 = NULL;
THCudaTensor *arg2 = NULL;
float arg3 = 0;
if(narg == 2
&& (arg1 = (THCudaTensor *)luaT_toudata(L, 1, "torch.CudaTensor"))
&& (arg2 = (THCudaTensor *)luaT_toudata(L, 2, "torch.CudaTensor"))
)
{
}
else
luaL_error(L, "expected arguments: CudaTensor CudaTensor");
arg3 = THCudaTensor_dot(arg1,arg2);
lua_pushnumber(L, (lua_Number)arg3);
return 1;
}

static int cutorch_CudaTensor_min(lua_State *L)
{
int narg = lua_gettop(L);
int argset = 0;
THCudaTensor *arg1 = NULL;
float arg2 = 0;
THCudaTensor *arg3 = NULL;
int arg3_idx = 0;
THCudaTensor *arg4 = NULL;
long arg5 = 0;
if(narg == 1
&& (arg1 = (THCudaTensor *)luaT_toudata(L, 1, "torch.CudaTensor"))
)
{
argset = 1;
}
else if(narg == 2
&& (arg4 = (THCudaTensor *)luaT_toudata(L, 1, "torch.CudaTensor"))
&& lua_isnumber(L, 2)
)
{
argset = 2;
arg5 = (long)lua_tonumber(L, 2)-1;
arg3 = THCudaTensor_new();
}
else if(narg == 3
&& (arg3 = (THCudaTensor *)luaT_toudata(L, 1, "torch.CudaTensor"))
&& (arg4 = (THCudaTensor *)luaT_toudata(L, 2, "torch.CudaTensor"))
&& lua_isnumber(L, 3)
)
{
argset = 2;
arg3_idx = 1;
arg5 = (long)lua_tonumber(L, 3)-1;
}
else
luaL_error(L, "expected arguments: CudaTensor | [*CudaTensor*] CudaTensor index");
if(argset == 1)
{
arg2 = THCudaTensor_minall(arg1);
lua_pushnumber(L, (lua_Number)arg2);
return 1;
}
else if(argset == 2)
{
if(arg3_idx)
lua_pushvalue(L, arg3_idx);
else
luaT_pushudata(L, arg3, "torch.CudaTensor");
THCudaTensor_min(arg3,arg4,arg5);
return 1;
}
return 0;
}

static int cutorch_CudaTensor_max(lua_State *L)
{
int narg = lua_gettop(L);
int argset = 0;
THCudaTensor *arg1 = NULL;
float arg2 = 0;
THCudaTensor *arg3 = NULL;
int arg3_idx = 0;
THCudaTensor *arg4 = NULL;
long arg5 = 0;
if(narg == 1
&& (arg1 = (THCudaTensor *)luaT_toudata(L, 1, "torch.CudaTensor"))
)
{
argset = 1;
}
else if(narg == 2
&& (arg4 = (THCudaTensor *)luaT_toudata(L, 1, "torch.CudaTensor"))
&& lua_isnumber(L, 2)
)
{
argset = 2;
arg5 = (long)lua_tonumber(L, 2)-1;
arg3 = THCudaTensor_new();
}
else if(narg == 3
&& (arg3 = (THCudaTensor *)luaT_toudata(L, 1, "torch.CudaTensor"))
&& (arg4 = (THCudaTensor *)luaT_toudata(L, 2, "torch.CudaTensor"))
&& lua_isnumber(L, 3)
)
{
argset = 2;
arg3_idx = 1;
arg5 = (long)lua_tonumber(L, 3)-1;
}
else
luaL_error(L, "expected arguments: CudaTensor | [*CudaTensor*] CudaTensor index");
if(argset == 1)
{
arg2 = THCudaTensor_maxall(arg1);
lua_pushnumber(L, (lua_Number)arg2);
return 1;
}
else if(argset == 2)
{
if(arg3_idx)
lua_pushvalue(L, arg3_idx);
else
luaT_pushudata(L, arg3, "torch.CudaTensor");
THCudaTensor_max(arg3,arg4,arg5);
return 1;
}
return 0;
}

static int cutorch_CudaTensor_sum(lua_State *L)
{
int narg = lua_gettop(L);
int argset = 0;
THCudaTensor *arg1 = NULL;
float arg2 = 0;
THCudaTensor *arg3 = NULL;
int arg3_idx = 0;
THCudaTensor *arg4 = NULL;
long arg5 = 0;
if(narg == 1
&& (arg1 = (THCudaTensor *)luaT_toudata(L, 1, "torch.CudaTensor"))
)
{
argset = 1;
}
else if(narg == 2
&& (arg4 = (THCudaTensor *)luaT_toudata(L, 1, "torch.CudaTensor"))
&& lua_isnumber(L, 2)
)
{
argset = 2;
arg5 = (long)lua_tonumber(L, 2)-1;
arg3 = THCudaTensor_new();
}
else if(narg == 3
&& (arg3 = (THCudaTensor *)luaT_toudata(L, 1, "torch.CudaTensor"))
&& (arg4 = (THCudaTensor *)luaT_toudata(L, 2, "torch.CudaTensor"))
&& lua_isnumber(L, 3)
)
{
argset = 2;
arg3_idx = 1;
arg5 = (long)lua_tonumber(L, 3)-1;
}
else
luaL_error(L, "expected arguments: CudaTensor | [*CudaTensor*] CudaTensor index");
if(argset == 1)
{
arg2 = THCudaTensor_sumall(arg1);
lua_pushnumber(L, (lua_Number)arg2);
return 1;
}
else if(argset == 2)
{
if(arg3_idx)
lua_pushvalue(L, arg3_idx);
else
luaT_pushudata(L, arg3, "torch.CudaTensor");
THCudaTensor_sum(arg3,arg4,arg5);
return 1;
}
return 0;
}

static int cutorch_CudaTensor_addmv(lua_State *L)
{
int narg = lua_gettop(L);
int argset = 0;
THCudaTensor *arg1 = NULL;
int arg1_idx = 0;
float arg2 = 1;
float arg3 = 1;
THCudaTensor *arg4 = NULL;
THCudaTensor *arg5 = NULL;
THCudaTensor *arg6 = NULL;
int arg6_idx = 0;
float arg7 = 0;
float arg8 = 0;
THCudaTensor *arg9 = NULL;
THCudaTensor *arg10 = NULL;
if(narg == 3
&& (arg1 = (THCudaTensor *)luaT_toudata(L, 1, "torch.CudaTensor"))
&& (arg4 = (THCudaTensor *)luaT_toudata(L, 2, "torch.CudaTensor"))
&& (arg5 = (THCudaTensor *)luaT_toudata(L, 3, "torch.CudaTensor"))
)
{
argset = 1;
arg1_idx = 1;
}
else if(narg == 4
&& (arg1 = (THCudaTensor *)luaT_toudata(L, 1, "torch.CudaTensor"))
&& lua_isnumber(L, 2)
&& (arg4 = (THCudaTensor *)luaT_toudata(L, 3, "torch.CudaTensor"))
&& (arg5 = (THCudaTensor *)luaT_toudata(L, 4, "torch.CudaTensor"))
)
{
argset = 1;
arg1_idx = 1;
arg3 = (float)lua_tonumber(L, 2);
}
else if(narg == 5
&& (arg6 = (THCudaTensor *)luaT_toudata(L, 1, "torch.CudaTensor"))
&& lua_isnumber(L, 2)
&& lua_isnumber(L, 3)
&& (arg9 = (THCudaTensor *)luaT_toudata(L, 4, "torch.CudaTensor"))
&& (arg10 = (THCudaTensor *)luaT_toudata(L, 5, "torch.CudaTensor"))
)
{
argset = 2;
arg6_idx = 1;
arg7 = (float)lua_tonumber(L, 2);
arg8 = (float)lua_tonumber(L, 3);
}
else
luaL_error(L, "expected arguments: *CudaTensor* [float] CudaTensor CudaTensor | *CudaTensor* float float CudaTensor CudaTensor");
if(argset == 1)
{
lua_pushvalue(L, arg1_idx);
THCudaTensor_addmv(arg1,arg2,arg3,arg4,arg5);
return 1;
}
else if(argset == 2)
{
lua_pushvalue(L, arg6_idx);
THCudaTensor_addmv(arg6,arg7,arg8,arg9,arg10);
return 1;
}
return 0;
}

static int cutorch_CudaTensor_addmm(lua_State *L)
{
int narg = lua_gettop(L);
int argset = 0;
THCudaTensor *arg1 = NULL;
int arg1_idx = 0;
float arg2 = 1;
float arg3 = 1;
THCudaTensor *arg4 = NULL;
THCudaTensor *arg5 = NULL;
THCudaTensor *arg6 = NULL;
int arg6_idx = 0;
float arg7 = 0;
float arg8 = 0;
THCudaTensor *arg9 = NULL;
THCudaTensor *arg10 = NULL;
if(narg == 3
&& (arg1 = (THCudaTensor *)luaT_toudata(L, 1, "torch.CudaTensor"))
&& (arg4 = (THCudaTensor *)luaT_toudata(L, 2, "torch.CudaTensor"))
&& (arg5 = (THCudaTensor *)luaT_toudata(L, 3, "torch.CudaTensor"))
)
{
argset = 1;
arg1_idx = 1;
}
else if(narg == 4
&& (arg1 = (THCudaTensor *)luaT_toudata(L, 1, "torch.CudaTensor"))
&& lua_isnumber(L, 2)
&& (arg4 = (THCudaTensor *)luaT_toudata(L, 3, "torch.CudaTensor"))
&& (arg5 = (THCudaTensor *)luaT_toudata(L, 4, "torch.CudaTensor"))
)
{
argset = 1;
arg1_idx = 1;
arg3 = (float)lua_tonumber(L, 2);
}
else if(narg == 5
&& (arg6 = (THCudaTensor *)luaT_toudata(L, 1, "torch.CudaTensor"))
&& lua_isnumber(L, 2)
&& lua_isnumber(L, 3)
&& (arg9 = (THCudaTensor *)luaT_toudata(L, 4, "torch.CudaTensor"))
&& (arg10 = (THCudaTensor *)luaT_toudata(L, 5, "torch.CudaTensor"))
)
{
argset = 2;
arg6_idx = 1;
arg7 = (float)lua_tonumber(L, 2);
arg8 = (float)lua_tonumber(L, 3);
}
else
luaL_error(L, "expected arguments: *CudaTensor* [float] CudaTensor CudaTensor | *CudaTensor* float float CudaTensor CudaTensor");
if(argset == 1)
{
lua_pushvalue(L, arg1_idx);
THCudaTensor_addmm(arg1,arg2,arg3,arg4,arg5);
return 1;
}
else if(argset == 2)
{
lua_pushvalue(L, arg6_idx);
THCudaTensor_addmm(arg6,arg7,arg8,arg9,arg10);
return 1;
}
return 0;
}

static int cutorch_CudaTensor_addr(lua_State *L)
{
int narg = lua_gettop(L);
THCudaTensor *arg1 = NULL;
int arg1_idx = 0;
float arg2 = 1;
THCudaTensor *arg3 = NULL;
THCudaTensor *arg4 = NULL;
if(narg == 3
&& (arg1 = (THCudaTensor *)luaT_toudata(L, 1, "torch.CudaTensor"))
&& (arg3 = (THCudaTensor *)luaT_toudata(L, 2, "torch.CudaTensor"))
&& (arg4 = (THCudaTensor *)luaT_toudata(L, 3, "torch.CudaTensor"))
)
{
arg1_idx = 1;
}
else if(narg == 4
&& (arg1 = (THCudaTensor *)luaT_toudata(L, 1, "torch.CudaTensor"))
&& lua_isnumber(L, 2)
&& (arg3 = (THCudaTensor *)luaT_toudata(L, 3, "torch.CudaTensor"))
&& (arg4 = (THCudaTensor *)luaT_toudata(L, 4, "torch.CudaTensor"))
)
{
arg1_idx = 1;
arg2 = (float)lua_tonumber(L, 2);
}
else
luaL_error(L, "expected arguments: *CudaTensor* [float] CudaTensor CudaTensor");
lua_pushvalue(L, arg1_idx);
THCudaTensor_addr(arg1,arg2,arg3,arg4);
return 1;
}

static int cutorch_CudaTensor_log(lua_State *L)
{
int narg = lua_gettop(L);
THCudaTensor *arg1 = NULL;
int arg1_idx = 0;
THCudaTensor *arg2 = NULL;
if(narg == 1
&& (arg1 = (THCudaTensor *)luaT_toudata(L, 1, "torch.CudaTensor"))
)
{
arg1_idx = 1;
arg2 = arg1;
}
else if(narg == 2
&& (arg1 = (THCudaTensor *)luaT_toudata(L, 1, "torch.CudaTensor"))
&& (arg2 = (THCudaTensor *)luaT_toudata(L, 2, "torch.CudaTensor"))
)
{
arg1_idx = 1;
}
else
luaL_error(L, "expected arguments: *CudaTensor* [CudaTensor]");
lua_pushvalue(L, arg1_idx);
THCudaTensor_log(arg1,arg2);
return 1;
}

static int cutorch_CudaTensor_log1p(lua_State *L)
{
int narg = lua_gettop(L);
THCudaTensor *arg1 = NULL;
int arg1_idx = 0;
THCudaTensor *arg2 = NULL;
if(narg == 1
&& (arg1 = (THCudaTensor *)luaT_toudata(L, 1, "torch.CudaTensor"))
)
{
arg1_idx = 1;
arg2 = arg1;
}
else if(narg == 2
&& (arg1 = (THCudaTensor *)luaT_toudata(L, 1, "torch.CudaTensor"))
&& (arg2 = (THCudaTensor *)luaT_toudata(L, 2, "torch.CudaTensor"))
)
{
arg1_idx = 1;
}
else
luaL_error(L, "expected arguments: *CudaTensor* [CudaTensor]");
lua_pushvalue(L, arg1_idx);
THCudaTensor_log1p(arg1,arg2);
return 1;
}

static int cutorch_CudaTensor_exp(lua_State *L)
{
int narg = lua_gettop(L);
THCudaTensor *arg1 = NULL;
int arg1_idx = 0;
THCudaTensor *arg2 = NULL;
if(narg == 1
&& (arg1 = (THCudaTensor *)luaT_toudata(L, 1, "torch.CudaTensor"))
)
{
arg1_idx = 1;
arg2 = arg1;
}
else if(narg == 2
&& (arg1 = (THCudaTensor *)luaT_toudata(L, 1, "torch.CudaTensor"))
&& (arg2 = (THCudaTensor *)luaT_toudata(L, 2, "torch.CudaTensor"))
)
{
arg1_idx = 1;
}
else
luaL_error(L, "expected arguments: *CudaTensor* [CudaTensor]");
lua_pushvalue(L, arg1_idx);
THCudaTensor_exp(arg1,arg2);
return 1;
}

static int cutorch_CudaTensor_cos(lua_State *L)
{
int narg = lua_gettop(L);
THCudaTensor *arg1 = NULL;
int arg1_idx = 0;
THCudaTensor *arg2 = NULL;
if(narg == 1
&& (arg1 = (THCudaTensor *)luaT_toudata(L, 1, "torch.CudaTensor"))
)
{
arg1_idx = 1;
arg2 = arg1;
}
else if(narg == 2
&& (arg1 = (THCudaTensor *)luaT_toudata(L, 1, "torch.CudaTensor"))
&& (arg2 = (THCudaTensor *)luaT_toudata(L, 2, "torch.CudaTensor"))
)
{
arg1_idx = 1;
}
else
luaL_error(L, "expected arguments: *CudaTensor* [CudaTensor]");
lua_pushvalue(L, arg1_idx);
THCudaTensor_cos(arg1,arg2);
return 1;
}

static int cutorch_CudaTensor_acos(lua_State *L)
{
int narg = lua_gettop(L);
THCudaTensor *arg1 = NULL;
int arg1_idx = 0;
THCudaTensor *arg2 = NULL;
if(narg == 1
&& (arg1 = (THCudaTensor *)luaT_toudata(L, 1, "torch.CudaTensor"))
)
{
arg1_idx = 1;
arg2 = arg1;
}
else if(narg == 2
&& (arg1 = (THCudaTensor *)luaT_toudata(L, 1, "torch.CudaTensor"))
&& (arg2 = (THCudaTensor *)luaT_toudata(L, 2, "torch.CudaTensor"))
)
{
arg1_idx = 1;
}
else
luaL_error(L, "expected arguments: *CudaTensor* [CudaTensor]");
lua_pushvalue(L, arg1_idx);
THCudaTensor_acos(arg1,arg2);
return 1;
}

static int cutorch_CudaTensor_cosh(lua_State *L)
{
int narg = lua_gettop(L);
THCudaTensor *arg1 = NULL;
int arg1_idx = 0;
THCudaTensor *arg2 = NULL;
if(narg == 1
&& (arg1 = (THCudaTensor *)luaT_toudata(L, 1, "torch.CudaTensor"))
)
{
arg1_idx = 1;
arg2 = arg1;
}
else if(narg == 2
&& (arg1 = (THCudaTensor *)luaT_toudata(L, 1, "torch.CudaTensor"))
&& (arg2 = (THCudaTensor *)luaT_toudata(L, 2, "torch.CudaTensor"))
)
{
arg1_idx = 1;
}
else
luaL_error(L, "expected arguments: *CudaTensor* [CudaTensor]");
lua_pushvalue(L, arg1_idx);
THCudaTensor_cosh(arg1,arg2);
return 1;
}

static int cutorch_CudaTensor_sin(lua_State *L)
{
int narg = lua_gettop(L);
THCudaTensor *arg1 = NULL;
int arg1_idx = 0;
THCudaTensor *arg2 = NULL;
if(narg == 1
&& (arg1 = (THCudaTensor *)luaT_toudata(L, 1, "torch.CudaTensor"))
)
{
arg1_idx = 1;
arg2 = arg1;
}
else if(narg == 2
&& (arg1 = (THCudaTensor *)luaT_toudata(L, 1, "torch.CudaTensor"))
&& (arg2 = (THCudaTensor *)luaT_toudata(L, 2, "torch.CudaTensor"))
)
{
arg1_idx = 1;
}
else
luaL_error(L, "expected arguments: *CudaTensor* [CudaTensor]");
lua_pushvalue(L, arg1_idx);
THCudaTensor_sin(arg1,arg2);
return 1;
}

static int cutorch_CudaTensor_asin(lua_State *L)
{
int narg = lua_gettop(L);
THCudaTensor *arg1 = NULL;
int arg1_idx = 0;
THCudaTensor *arg2 = NULL;
if(narg == 1
&& (arg1 = (THCudaTensor *)luaT_toudata(L, 1, "torch.CudaTensor"))
)
{
arg1_idx = 1;
arg2 = arg1;
}
else if(narg == 2
&& (arg1 = (THCudaTensor *)luaT_toudata(L, 1, "torch.CudaTensor"))
&& (arg2 = (THCudaTensor *)luaT_toudata(L, 2, "torch.CudaTensor"))
)
{
arg1_idx = 1;
}
else
luaL_error(L, "expected arguments: *CudaTensor* [CudaTensor]");
lua_pushvalue(L, arg1_idx);
THCudaTensor_asin(arg1,arg2);
return 1;
}

static int cutorch_CudaTensor_sinh(lua_State *L)
{
int narg = lua_gettop(L);
THCudaTensor *arg1 = NULL;
int arg1_idx = 0;
THCudaTensor *arg2 = NULL;
if(narg == 1
&& (arg1 = (THCudaTensor *)luaT_toudata(L, 1, "torch.CudaTensor"))
)
{
arg1_idx = 1;
arg2 = arg1;
}
else if(narg == 2
&& (arg1 = (THCudaTensor *)luaT_toudata(L, 1, "torch.CudaTensor"))
&& (arg2 = (THCudaTensor *)luaT_toudata(L, 2, "torch.CudaTensor"))
)
{
arg1_idx = 1;
}
else
luaL_error(L, "expected arguments: *CudaTensor* [CudaTensor]");
lua_pushvalue(L, arg1_idx);
THCudaTensor_sinh(arg1,arg2);
return 1;
}

static int cutorch_CudaTensor_tan(lua_State *L)
{
int narg = lua_gettop(L);
THCudaTensor *arg1 = NULL;
int arg1_idx = 0;
THCudaTensor *arg2 = NULL;
if(narg == 1
&& (arg1 = (THCudaTensor *)luaT_toudata(L, 1, "torch.CudaTensor"))
)
{
arg1_idx = 1;
arg2 = arg1;
}
else if(narg == 2
&& (arg1 = (THCudaTensor *)luaT_toudata(L, 1, "torch.CudaTensor"))
&& (arg2 = (THCudaTensor *)luaT_toudata(L, 2, "torch.CudaTensor"))
)
{
arg1_idx = 1;
}
else
luaL_error(L, "expected arguments: *CudaTensor* [CudaTensor]");
lua_pushvalue(L, arg1_idx);
THCudaTensor_tan(arg1,arg2);
return 1;
}

static int cutorch_CudaTensor_atan(lua_State *L)
{
int narg = lua_gettop(L);
THCudaTensor *arg1 = NULL;
int arg1_idx = 0;
THCudaTensor *arg2 = NULL;
if(narg == 1
&& (arg1 = (THCudaTensor *)luaT_toudata(L, 1, "torch.CudaTensor"))
)
{
arg1_idx = 1;
arg2 = arg1;
}
else if(narg == 2
&& (arg1 = (THCudaTensor *)luaT_toudata(L, 1, "torch.CudaTensor"))
&& (arg2 = (THCudaTensor *)luaT_toudata(L, 2, "torch.CudaTensor"))
)
{
arg1_idx = 1;
}
else
luaL_error(L, "expected arguments: *CudaTensor* [CudaTensor]");
lua_pushvalue(L, arg1_idx);
THCudaTensor_atan(arg1,arg2);
return 1;
}

static int cutorch_CudaTensor_tanh(lua_State *L)
{
int narg = lua_gettop(L);
THCudaTensor *arg1 = NULL;
int arg1_idx = 0;
THCudaTensor *arg2 = NULL;
if(narg == 1
&& (arg1 = (THCudaTensor *)luaT_toudata(L, 1, "torch.CudaTensor"))
)
{
arg1_idx = 1;
arg2 = arg1;
}
else if(narg == 2
&& (arg1 = (THCudaTensor *)luaT_toudata(L, 1, "torch.CudaTensor"))
&& (arg2 = (THCudaTensor *)luaT_toudata(L, 2, "torch.CudaTensor"))
)
{
arg1_idx = 1;
}
else
luaL_error(L, "expected arguments: *CudaTensor* [CudaTensor]");
lua_pushvalue(L, arg1_idx);
THCudaTensor_tanh(arg1,arg2);
return 1;
}

static int cutorch_CudaTensor_sqrt(lua_State *L)
{
int narg = lua_gettop(L);
THCudaTensor *arg1 = NULL;
int arg1_idx = 0;
THCudaTensor *arg2 = NULL;
if(narg == 1
&& (arg1 = (THCudaTensor *)luaT_toudata(L, 1, "torch.CudaTensor"))
)
{
arg1_idx = 1;
arg2 = arg1;
}
else if(narg == 2
&& (arg1 = (THCudaTensor *)luaT_toudata(L, 1, "torch.CudaTensor"))
&& (arg2 = (THCudaTensor *)luaT_toudata(L, 2, "torch.CudaTensor"))
)
{
arg1_idx = 1;
}
else
luaL_error(L, "expected arguments: *CudaTensor* [CudaTensor]");
lua_pushvalue(L, arg1_idx);
THCudaTensor_sqrt(arg1,arg2);
return 1;
}

static int cutorch_CudaTensor_ceil(lua_State *L)
{
int narg = lua_gettop(L);
THCudaTensor *arg1 = NULL;
int arg1_idx = 0;
THCudaTensor *arg2 = NULL;
if(narg == 1
&& (arg1 = (THCudaTensor *)luaT_toudata(L, 1, "torch.CudaTensor"))
)
{
arg1_idx = 1;
arg2 = arg1;
}
else if(narg == 2
&& (arg1 = (THCudaTensor *)luaT_toudata(L, 1, "torch.CudaTensor"))
&& (arg2 = (THCudaTensor *)luaT_toudata(L, 2, "torch.CudaTensor"))
)
{
arg1_idx = 1;
}
else
luaL_error(L, "expected arguments: *CudaTensor* [CudaTensor]");
lua_pushvalue(L, arg1_idx);
THCudaTensor_ceil(arg1,arg2);
return 1;
}

static int cutorch_CudaTensor_floor(lua_State *L)
{
int narg = lua_gettop(L);
THCudaTensor *arg1 = NULL;
int arg1_idx = 0;
THCudaTensor *arg2 = NULL;
if(narg == 1
&& (arg1 = (THCudaTensor *)luaT_toudata(L, 1, "torch.CudaTensor"))
)
{
arg1_idx = 1;
arg2 = arg1;
}
else if(narg == 2
&& (arg1 = (THCudaTensor *)luaT_toudata(L, 1, "torch.CudaTensor"))
&& (arg2 = (THCudaTensor *)luaT_toudata(L, 2, "torch.CudaTensor"))
)
{
arg1_idx = 1;
}
else
luaL_error(L, "expected arguments: *CudaTensor* [CudaTensor]");
lua_pushvalue(L, arg1_idx);
THCudaTensor_floor(arg1,arg2);
return 1;
}

static int cutorch_CudaTensor_abs(lua_State *L)
{
int narg = lua_gettop(L);
THCudaTensor *arg1 = NULL;
int arg1_idx = 0;
THCudaTensor *arg2 = NULL;
if(narg == 1
&& (arg1 = (THCudaTensor *)luaT_toudata(L, 1, "torch.CudaTensor"))
)
{
arg1_idx = 1;
arg2 = arg1;
}
else if(narg == 2
&& (arg1 = (THCudaTensor *)luaT_toudata(L, 1, "torch.CudaTensor"))
&& (arg2 = (THCudaTensor *)luaT_toudata(L, 2, "torch.CudaTensor"))
)
{
arg1_idx = 1;
}
else
luaL_error(L, "expected arguments: *CudaTensor* [CudaTensor]");
lua_pushvalue(L, arg1_idx);
THCudaTensor_abs(arg1,arg2);
return 1;
}

static int cutorch_CudaTensor_sign(lua_State *L)
{
int narg = lua_gettop(L);
THCudaTensor *arg1 = NULL;
int arg1_idx = 0;
THCudaTensor *arg2 = NULL;
if(narg == 1
&& (arg1 = (THCudaTensor *)luaT_toudata(L, 1, "torch.CudaTensor"))
)
{
arg1_idx = 1;
arg2 = arg1;
}
else if(narg == 2
&& (arg1 = (THCudaTensor *)luaT_toudata(L, 1, "torch.CudaTensor"))
&& (arg2 = (THCudaTensor *)luaT_toudata(L, 2, "torch.CudaTensor"))
)
{
arg1_idx = 1;
}
else
luaL_error(L, "expected arguments: *CudaTensor* [CudaTensor]");
lua_pushvalue(L, arg1_idx);
THCudaTensor_sign(arg1,arg2);
return 1;
}

static int cutorch_CudaTensor_pow(lua_State *L)
{
int narg = lua_gettop(L);
THCudaTensor *arg1 = NULL;
int arg1_idx = 0;
THCudaTensor *arg2 = NULL;
float arg3 = 0;
if(narg == 2
&& (arg1 = (THCudaTensor *)luaT_toudata(L, 1, "torch.CudaTensor"))
&& lua_isnumber(L, 2)
)
{
arg1_idx = 1;
arg3 = (float)lua_tonumber(L, 2);
arg2 = arg1;
}
else if(narg == 3
&& (arg1 = (THCudaTensor *)luaT_toudata(L, 1, "torch.CudaTensor"))
&& (arg2 = (THCudaTensor *)luaT_toudata(L, 2, "torch.CudaTensor"))
&& lua_isnumber(L, 3)
)
{
arg1_idx = 1;
arg3 = (float)lua_tonumber(L, 3);
}
else
luaL_error(L, "expected arguments: *CudaTensor* [CudaTensor] float");
lua_pushvalue(L, arg1_idx);
THCudaTensor_pow(arg1,arg2,arg3);
return 1;
}

static int cutorch_CudaTensor_clamp(lua_State *L)
{
int narg = lua_gettop(L);
THCudaTensor *arg1 = NULL;
int arg1_idx = 0;
THCudaTensor *arg2 = NULL;
float arg3 = 0;
float arg4 = 0;
if(narg == 3
&& (arg1 = (THCudaTensor *)luaT_toudata(L, 1, "torch.CudaTensor"))
&& lua_isnumber(L, 2)
&& lua_isnumber(L, 3)
)
{
arg1_idx = 1;
arg3 = (float)lua_tonumber(L, 2);
arg4 = (float)lua_tonumber(L, 3);
arg2 = arg1;
}
else if(narg == 4
&& (arg1 = (THCudaTensor *)luaT_toudata(L, 1, "torch.CudaTensor"))
&& (arg2 = (THCudaTensor *)luaT_toudata(L, 2, "torch.CudaTensor"))
&& lua_isnumber(L, 3)
&& lua_isnumber(L, 4)
)
{
arg1_idx = 1;
arg3 = (float)lua_tonumber(L, 3);
arg4 = (float)lua_tonumber(L, 4);
}
else
luaL_error(L, "expected arguments: *CudaTensor* [CudaTensor] float float");
lua_pushvalue(L, arg1_idx);
THCudaTensor_clamp(arg1,arg2,arg3,arg4);
return 1;
}

static int cutorch_CudaTensor_lt(lua_State *L)
{
int narg = lua_gettop(L);
int argset = 0;
THCudaTensor *arg1 = NULL;
int arg1_idx = 0;
THCudaTensor *arg2 = NULL;
float arg3 = 0;
THCudaTensor *arg4 = NULL;
int arg4_idx = 0;
THCudaTensor *arg5 = NULL;
THCudaTensor *arg6 = NULL;
if(narg == 2
&& (arg2 = (THCudaTensor *)luaT_toudata(L, 1, "torch.CudaTensor"))
&& lua_isnumber(L, 2)
)
{
argset = 1;
arg3 = (float)lua_tonumber(L, 2);
arg1 = THCudaTensor_new();
}
else if(narg == 3
&& (arg1 = (THCudaTensor *)luaT_toudata(L, 1, "torch.CudaTensor"))
&& (arg2 = (THCudaTensor *)luaT_toudata(L, 2, "torch.CudaTensor"))
&& lua_isnumber(L, 3)
)
{
argset = 1;
arg1_idx = 1;
arg3 = (float)lua_tonumber(L, 3);
}
else if(narg == 3
&& (arg4 = (THCudaTensor *)luaT_toudata(L, 1, "torch.CudaTensor"))
&& (arg5 = (THCudaTensor *)luaT_toudata(L, 2, "torch.CudaTensor"))
&& (arg6 = (THCudaTensor *)luaT_toudata(L, 3, "torch.CudaTensor"))
)
{
argset = 2;
arg4_idx = 1;
}
else
luaL_error(L, "expected arguments: [*CudaTensor*] CudaTensor float | *CudaTensor* CudaTensor CudaTensor");
if(argset == 1)
{
if(arg1_idx)
lua_pushvalue(L, arg1_idx);
else
luaT_pushudata(L, arg1, "torch.CudaTensor");
THCudaTensor_ltValue(arg1,arg2,arg3);
return 1;
}
else if(argset == 2)
{
lua_pushvalue(L, arg4_idx);
THCudaTensor_ltTensor(arg4,arg5,arg6);
return 1;
}
return 0;
}

static int cutorch_CudaTensor_gt(lua_State *L)
{
int narg = lua_gettop(L);
int argset = 0;
THCudaTensor *arg1 = NULL;
int arg1_idx = 0;
THCudaTensor *arg2 = NULL;
float arg3 = 0;
THCudaTensor *arg4 = NULL;
int arg4_idx = 0;
THCudaTensor *arg5 = NULL;
THCudaTensor *arg6 = NULL;
if(narg == 2
&& (arg2 = (THCudaTensor *)luaT_toudata(L, 1, "torch.CudaTensor"))
&& lua_isnumber(L, 2)
)
{
argset = 1;
arg3 = (float)lua_tonumber(L, 2);
arg1 = THCudaTensor_new();
}
else if(narg == 3
&& (arg1 = (THCudaTensor *)luaT_toudata(L, 1, "torch.CudaTensor"))
&& (arg2 = (THCudaTensor *)luaT_toudata(L, 2, "torch.CudaTensor"))
&& lua_isnumber(L, 3)
)
{
argset = 1;
arg1_idx = 1;
arg3 = (float)lua_tonumber(L, 3);
}
else if(narg == 3
&& (arg4 = (THCudaTensor *)luaT_toudata(L, 1, "torch.CudaTensor"))
&& (arg5 = (THCudaTensor *)luaT_toudata(L, 2, "torch.CudaTensor"))
&& (arg6 = (THCudaTensor *)luaT_toudata(L, 3, "torch.CudaTensor"))
)
{
argset = 2;
arg4_idx = 1;
}
else
luaL_error(L, "expected arguments: [*CudaTensor*] CudaTensor float | *CudaTensor* CudaTensor CudaTensor");
if(argset == 1)
{
if(arg1_idx)
lua_pushvalue(L, arg1_idx);
else
luaT_pushudata(L, arg1, "torch.CudaTensor");
THCudaTensor_gtValue(arg1,arg2,arg3);
return 1;
}
else if(argset == 2)
{
lua_pushvalue(L, arg4_idx);
THCudaTensor_gtTensor(arg4,arg5,arg6);
return 1;
}
return 0;
}

static int cutorch_CudaTensor_le(lua_State *L)
{
int narg = lua_gettop(L);
int argset = 0;
THCudaTensor *arg1 = NULL;
int arg1_idx = 0;
THCudaTensor *arg2 = NULL;
float arg3 = 0;
THCudaTensor *arg4 = NULL;
int arg4_idx = 0;
THCudaTensor *arg5 = NULL;
THCudaTensor *arg6 = NULL;
if(narg == 2
&& (arg2 = (THCudaTensor *)luaT_toudata(L, 1, "torch.CudaTensor"))
&& lua_isnumber(L, 2)
)
{
argset = 1;
arg3 = (float)lua_tonumber(L, 2);
arg1 = THCudaTensor_new();
}
else if(narg == 3
&& (arg1 = (THCudaTensor *)luaT_toudata(L, 1, "torch.CudaTensor"))
&& (arg2 = (THCudaTensor *)luaT_toudata(L, 2, "torch.CudaTensor"))
&& lua_isnumber(L, 3)
)
{
argset = 1;
arg1_idx = 1;
arg3 = (float)lua_tonumber(L, 3);
}
else if(narg == 3
&& (arg4 = (THCudaTensor *)luaT_toudata(L, 1, "torch.CudaTensor"))
&& (arg5 = (THCudaTensor *)luaT_toudata(L, 2, "torch.CudaTensor"))
&& (arg6 = (THCudaTensor *)luaT_toudata(L, 3, "torch.CudaTensor"))
)
{
argset = 2;
arg4_idx = 1;
}
else
luaL_error(L, "expected arguments: [*CudaTensor*] CudaTensor float | *CudaTensor* CudaTensor CudaTensor");
if(argset == 1)
{
if(arg1_idx)
lua_pushvalue(L, arg1_idx);
else
luaT_pushudata(L, arg1, "torch.CudaTensor");
THCudaTensor_leValue(arg1,arg2,arg3);
return 1;
}
else if(argset == 2)
{
lua_pushvalue(L, arg4_idx);
THCudaTensor_leTensor(arg4,arg5,arg6);
return 1;
}
return 0;
}

static int cutorch_CudaTensor_ge(lua_State *L)
{
int narg = lua_gettop(L);
int argset = 0;
THCudaTensor *arg1 = NULL;
int arg1_idx = 0;
THCudaTensor *arg2 = NULL;
float arg3 = 0;
THCudaTensor *arg4 = NULL;
int arg4_idx = 0;
THCudaTensor *arg5 = NULL;
THCudaTensor *arg6 = NULL;
if(narg == 2
&& (arg2 = (THCudaTensor *)luaT_toudata(L, 1, "torch.CudaTensor"))
&& lua_isnumber(L, 2)
)
{
argset = 1;
arg3 = (float)lua_tonumber(L, 2);
arg1 = THCudaTensor_new();
}
else if(narg == 3
&& (arg1 = (THCudaTensor *)luaT_toudata(L, 1, "torch.CudaTensor"))
&& (arg2 = (THCudaTensor *)luaT_toudata(L, 2, "torch.CudaTensor"))
&& lua_isnumber(L, 3)
)
{
argset = 1;
arg1_idx = 1;
arg3 = (float)lua_tonumber(L, 3);
}
else if(narg == 3
&& (arg4 = (THCudaTensor *)luaT_toudata(L, 1, "torch.CudaTensor"))
&& (arg5 = (THCudaTensor *)luaT_toudata(L, 2, "torch.CudaTensor"))
&& (arg6 = (THCudaTensor *)luaT_toudata(L, 3, "torch.CudaTensor"))
)
{
argset = 2;
arg4_idx = 1;
}
else
luaL_error(L, "expected arguments: [*CudaTensor*] CudaTensor float | *CudaTensor* CudaTensor CudaTensor");
if(argset == 1)
{
if(arg1_idx)
lua_pushvalue(L, arg1_idx);
else
luaT_pushudata(L, arg1, "torch.CudaTensor");
THCudaTensor_geValue(arg1,arg2,arg3);
return 1;
}
else if(argset == 2)
{
lua_pushvalue(L, arg4_idx);
THCudaTensor_geTensor(arg4,arg5,arg6);
return 1;
}
return 0;
}

static int cutorch_CudaTensor_eq(lua_State *L)
{
int narg = lua_gettop(L);
int argset = 0;
THCudaTensor *arg1 = NULL;
int arg1_idx = 0;
THCudaTensor *arg2 = NULL;
float arg3 = 0;
THCudaTensor *arg4 = NULL;
int arg4_idx = 0;
THCudaTensor *arg5 = NULL;
THCudaTensor *arg6 = NULL;
if(narg == 2
&& (arg2 = (THCudaTensor *)luaT_toudata(L, 1, "torch.CudaTensor"))
&& lua_isnumber(L, 2)
)
{
argset = 1;
arg3 = (float)lua_tonumber(L, 2);
arg1 = THCudaTensor_new();
}
else if(narg == 3
&& (arg1 = (THCudaTensor *)luaT_toudata(L, 1, "torch.CudaTensor"))
&& (arg2 = (THCudaTensor *)luaT_toudata(L, 2, "torch.CudaTensor"))
&& lua_isnumber(L, 3)
)
{
argset = 1;
arg1_idx = 1;
arg3 = (float)lua_tonumber(L, 3);
}
else if(narg == 3
&& (arg4 = (THCudaTensor *)luaT_toudata(L, 1, "torch.CudaTensor"))
&& (arg5 = (THCudaTensor *)luaT_toudata(L, 2, "torch.CudaTensor"))
&& (arg6 = (THCudaTensor *)luaT_toudata(L, 3, "torch.CudaTensor"))
)
{
argset = 2;
arg4_idx = 1;
}
else
luaL_error(L, "expected arguments: [*CudaTensor*] CudaTensor float | *CudaTensor* CudaTensor CudaTensor");
if(argset == 1)
{
if(arg1_idx)
lua_pushvalue(L, arg1_idx);
else
luaT_pushudata(L, arg1, "torch.CudaTensor");
THCudaTensor_eqValue(arg1,arg2,arg3);
return 1;
}
else if(argset == 2)
{
lua_pushvalue(L, arg4_idx);
THCudaTensor_eqTensor(arg4,arg5,arg6);
return 1;
}
return 0;
}

static int cutorch_CudaTensor_ne(lua_State *L)
{
int narg = lua_gettop(L);
int argset = 0;
THCudaTensor *arg1 = NULL;
int arg1_idx = 0;
THCudaTensor *arg2 = NULL;
float arg3 = 0;
THCudaTensor *arg4 = NULL;
int arg4_idx = 0;
THCudaTensor *arg5 = NULL;
THCudaTensor *arg6 = NULL;
if(narg == 2
&& (arg2 = (THCudaTensor *)luaT_toudata(L, 1, "torch.CudaTensor"))
&& lua_isnumber(L, 2)
)
{
argset = 1;
arg3 = (float)lua_tonumber(L, 2);
arg1 = THCudaTensor_new();
}
else if(narg == 3
&& (arg1 = (THCudaTensor *)luaT_toudata(L, 1, "torch.CudaTensor"))
&& (arg2 = (THCudaTensor *)luaT_toudata(L, 2, "torch.CudaTensor"))
&& lua_isnumber(L, 3)
)
{
argset = 1;
arg1_idx = 1;
arg3 = (float)lua_tonumber(L, 3);
}
else if(narg == 3
&& (arg4 = (THCudaTensor *)luaT_toudata(L, 1, "torch.CudaTensor"))
&& (arg5 = (THCudaTensor *)luaT_toudata(L, 2, "torch.CudaTensor"))
&& (arg6 = (THCudaTensor *)luaT_toudata(L, 3, "torch.CudaTensor"))
)
{
argset = 2;
arg4_idx = 1;
}
else
luaL_error(L, "expected arguments: [*CudaTensor*] CudaTensor float | *CudaTensor* CudaTensor CudaTensor");
if(argset == 1)
{
if(arg1_idx)
lua_pushvalue(L, arg1_idx);
else
luaT_pushudata(L, arg1, "torch.CudaTensor");
THCudaTensor_neValue(arg1,arg2,arg3);
return 1;
}
else if(argset == 2)
{
lua_pushvalue(L, arg4_idx);
THCudaTensor_neTensor(arg4,arg5,arg6);
return 1;
}
return 0;
}

static int cutorch_CudaTensor_geometric(lua_State *L)
{
int narg = lua_gettop(L);
THCudaTensor *arg1 = NULL;
int arg1_idx = 0;
float arg2 = 0;
if(narg == 2
&& (arg1 = (THCudaTensor *)luaT_toudata(L, 1, "torch.CudaTensor"))
&& lua_isnumber(L, 2)
)
{
arg1_idx = 1;
arg2 = (float)lua_tonumber(L, 2);
}
else
luaL_error(L, "expected arguments: *CudaTensor* float");
lua_pushvalue(L, arg1_idx);
THCudaTensor_geometric(arg1,arg2);
return 1;
}

static int cutorch_CudaTensor_bernoulli(lua_State *L)
{
int narg = lua_gettop(L);
THCudaTensor *arg1 = NULL;
int arg1_idx = 0;
float arg2 = 0;
if(narg == 1
&& (arg1 = (THCudaTensor *)luaT_toudata(L, 1, "torch.CudaTensor"))
)
{
arg1_idx = 1;
}
else if(narg == 2
&& (arg1 = (THCudaTensor *)luaT_toudata(L, 1, "torch.CudaTensor"))
&& lua_isnumber(L, 2)
)
{
arg1_idx = 1;
arg2 = (float)lua_tonumber(L, 2);
}
else
luaL_error(L, "expected arguments: *CudaTensor* [float]");
lua_pushvalue(L, arg1_idx);
THCudaTensor_bernoulli(arg1,arg2);
return 1;
}

static int cutorch_CudaTensor_uniform(lua_State *L)
{
int narg = lua_gettop(L);
THCudaTensor *arg1 = NULL;
int arg1_idx = 0;
float arg2 = 0;
float arg3 = 1;
if(narg == 1
&& (arg1 = (THCudaTensor *)luaT_toudata(L, 1, "torch.CudaTensor"))
)
{
arg1_idx = 1;
}
else if(narg == 2
&& (arg1 = (THCudaTensor *)luaT_toudata(L, 1, "torch.CudaTensor"))
&& lua_isnumber(L, 2)
)
{
arg1_idx = 1;
arg2 = (float)lua_tonumber(L, 2);
}
else if(narg == 2
&& (arg1 = (THCudaTensor *)luaT_toudata(L, 1, "torch.CudaTensor"))
&& lua_isnumber(L, 2)
)
{
arg1_idx = 1;
arg3 = (float)lua_tonumber(L, 2);
}
else if(narg == 3
&& (arg1 = (THCudaTensor *)luaT_toudata(L, 1, "torch.CudaTensor"))
&& lua_isnumber(L, 2)
&& lua_isnumber(L, 3)
)
{
arg1_idx = 1;
arg2 = (float)lua_tonumber(L, 2);
arg3 = (float)lua_tonumber(L, 3);
}
else
luaL_error(L, "expected arguments: *CudaTensor* [float] [float]");
lua_pushvalue(L, arg1_idx);
THCudaTensor_uniform(arg1,arg2,arg3);
return 1;
}

static int cutorch_CudaTensor_normal(lua_State *L)
{
int narg = lua_gettop(L);
THCudaTensor *arg1 = NULL;
int arg1_idx = 0;
float arg2 = 0;
float arg3 = 1;
if(narg == 1
&& (arg1 = (THCudaTensor *)luaT_toudata(L, 1, "torch.CudaTensor"))
)
{
arg1_idx = 1;
}
else if(narg == 2
&& (arg1 = (THCudaTensor *)luaT_toudata(L, 1, "torch.CudaTensor"))
&& lua_isnumber(L, 2)
)
{
arg1_idx = 1;
arg2 = (float)lua_tonumber(L, 2);
}
else if(narg == 2
&& (arg1 = (THCudaTensor *)luaT_toudata(L, 1, "torch.CudaTensor"))
&& lua_isnumber(L, 2)
)
{
arg1_idx = 1;
arg3 = (float)lua_tonumber(L, 2);
}
else if(narg == 3
&& (arg1 = (THCudaTensor *)luaT_toudata(L, 1, "torch.CudaTensor"))
&& lua_isnumber(L, 2)
&& lua_isnumber(L, 3)
)
{
arg1_idx = 1;
arg2 = (float)lua_tonumber(L, 2);
arg3 = (float)lua_tonumber(L, 3);
}
else
luaL_error(L, "expected arguments: *CudaTensor* [float] [float]");
lua_pushvalue(L, arg1_idx);
THCudaTensor_normal(arg1,arg2,arg3);
return 1;
}

static int cutorch_CudaTensor_cauchy(lua_State *L)
{
int narg = lua_gettop(L);
THCudaTensor *arg1 = NULL;
int arg1_idx = 0;
float arg2 = 0;
float arg3 = 1;
if(narg == 1
&& (arg1 = (THCudaTensor *)luaT_toudata(L, 1, "torch.CudaTensor"))
)
{
arg1_idx = 1;
}
else if(narg == 2
&& (arg1 = (THCudaTensor *)luaT_toudata(L, 1, "torch.CudaTensor"))
&& lua_isnumber(L, 2)
)
{
arg1_idx = 1;
arg2 = (float)lua_tonumber(L, 2);
}
else if(narg == 2
&& (arg1 = (THCudaTensor *)luaT_toudata(L, 1, "torch.CudaTensor"))
&& lua_isnumber(L, 2)
)
{
arg1_idx = 1;
arg3 = (float)lua_tonumber(L, 2);
}
else if(narg == 3
&& (arg1 = (THCudaTensor *)luaT_toudata(L, 1, "torch.CudaTensor"))
&& lua_isnumber(L, 2)
&& lua_isnumber(L, 3)
)
{
arg1_idx = 1;
arg2 = (float)lua_tonumber(L, 2);
arg3 = (float)lua_tonumber(L, 3);
}
else
luaL_error(L, "expected arguments: *CudaTensor* [float] [float]");
lua_pushvalue(L, arg1_idx);
THCudaTensor_cauchy(arg1,arg2,arg3);
return 1;
}

static int cutorch_CudaTensor_logNormal(lua_State *L)
{
int narg = lua_gettop(L);
THCudaTensor *arg1 = NULL;
int arg1_idx = 0;
float arg2 = 1;
float arg3 = 2;
if(narg == 1
&& (arg1 = (THCudaTensor *)luaT_toudata(L, 1, "torch.CudaTensor"))
)
{
arg1_idx = 1;
}
else if(narg == 2
&& (arg1 = (THCudaTensor *)luaT_toudata(L, 1, "torch.CudaTensor"))
&& lua_isnumber(L, 2)
)
{
arg1_idx = 1;
arg2 = (float)lua_tonumber(L, 2);
}
else if(narg == 2
&& (arg1 = (THCudaTensor *)luaT_toudata(L, 1, "torch.CudaTensor"))
&& lua_isnumber(L, 2)
)
{
arg1_idx = 1;
arg3 = (float)lua_tonumber(L, 2);
}
else if(narg == 3
&& (arg1 = (THCudaTensor *)luaT_toudata(L, 1, "torch.CudaTensor"))
&& lua_isnumber(L, 2)
&& lua_isnumber(L, 3)
)
{
arg1_idx = 1;
arg2 = (float)lua_tonumber(L, 2);
arg3 = (float)lua_tonumber(L, 3);
}
else
luaL_error(L, "expected arguments: *CudaTensor* [float] [float]");
lua_pushvalue(L, arg1_idx);
THCudaTensor_logNormal(arg1,arg2,arg3);
return 1;
}

static int cutorch_CudaTensor_exponential(lua_State *L)
{
int narg = lua_gettop(L);
THCudaTensor *arg1 = NULL;
int arg1_idx = 0;
float arg2 = 0;
if(narg == 2
&& (arg1 = (THCudaTensor *)luaT_toudata(L, 1, "torch.CudaTensor"))
&& lua_isnumber(L, 2)
)
{
arg1_idx = 1;
arg2 = (float)lua_tonumber(L, 2);
}
else
luaL_error(L, "expected arguments: *CudaTensor* float");
lua_pushvalue(L, arg1_idx);
THCudaTensor_exponential(arg1,arg2);
return 1;
}

static int cutorch_CudaTensor_mean(lua_State *L)
{
int narg = lua_gettop(L);
int argset = 0;
THCudaTensor *arg1 = NULL;
float arg2 = 0;
THCudaTensor *arg3 = NULL;
int arg3_idx = 0;
THCudaTensor *arg4 = NULL;
long arg5 = 0;
if(narg == 1
&& (arg1 = (THCudaTensor *)luaT_toudata(L, 1, "torch.CudaTensor"))
)
{
argset = 1;
}
else if(narg == 2
&& (arg4 = (THCudaTensor *)luaT_toudata(L, 1, "torch.CudaTensor"))
&& lua_isnumber(L, 2)
)
{
argset = 2;
arg5 = (long)lua_tonumber(L, 2)-1;
arg3 = THCudaTensor_new();
}
else if(narg == 3
&& (arg3 = (THCudaTensor *)luaT_toudata(L, 1, "torch.CudaTensor"))
&& (arg4 = (THCudaTensor *)luaT_toudata(L, 2, "torch.CudaTensor"))
&& lua_isnumber(L, 3)
)
{
argset = 2;
arg3_idx = 1;
arg5 = (long)lua_tonumber(L, 3)-1;
}
else
luaL_error(L, "expected arguments: CudaTensor | [*CudaTensor*] CudaTensor index");
if(argset == 1)
{
arg2 = THCudaTensor_meanall(arg1);
lua_pushnumber(L, (lua_Number)arg2);
return 1;
}
else if(argset == 2)
{
if(arg3_idx)
lua_pushvalue(L, arg3_idx);
else
luaT_pushudata(L, arg3, "torch.CudaTensor");
THCudaTensor_mean(arg3,arg4,arg5);
return 1;
}
return 0;
}

static int cutorch_CudaTensor_var(lua_State *L)
{
int narg = lua_gettop(L);
THCudaTensor *arg1 = NULL;
float arg2 = 0;
if(narg == 1
&& (arg1 = (THCudaTensor *)luaT_toudata(L, 1, "torch.CudaTensor"))
)
{
}
else
luaL_error(L, "expected arguments: CudaTensor");
arg2 = THCudaTensor_varall(arg1);
lua_pushnumber(L, (lua_Number)arg2);
return 1;
}

static int cutorch_CudaTensor_std(lua_State *L)
{
int narg = lua_gettop(L);
THCudaTensor *arg1 = NULL;
float arg2 = 0;
if(narg == 1
&& (arg1 = (THCudaTensor *)luaT_toudata(L, 1, "torch.CudaTensor"))
)
{
}
else
luaL_error(L, "expected arguments: CudaTensor");
arg2 = THCudaTensor_stdall(arg1);
lua_pushnumber(L, (lua_Number)arg2);
return 1;
}

static int cutorch_CudaTensor_norm(lua_State *L)
{
int narg = lua_gettop(L);
int argset = 0;
THCudaTensor *arg1 = NULL;
float arg2 = 2;
float arg3 = 0;
THCudaTensor *arg4 = NULL;
int arg4_idx = 0;
THCudaTensor *arg5 = NULL;
float arg6 = 0;
long arg7 = 0;
if(narg == 1
&& (arg1 = (THCudaTensor *)luaT_toudata(L, 1, "torch.CudaTensor"))
)
{
argset = 1;
}
else if(narg == 2
&& (arg1 = (THCudaTensor *)luaT_toudata(L, 1, "torch.CudaTensor"))
&& lua_isnumber(L, 2)
)
{
argset = 1;
arg2 = (float)lua_tonumber(L, 2);
}
else if(narg == 3
&& (arg5 = (THCudaTensor *)luaT_toudata(L, 1, "torch.CudaTensor"))
&& lua_isnumber(L, 2)
&& lua_isnumber(L, 3)
)
{
argset = 2;
arg6 = (float)lua_tonumber(L, 2);
arg7 = (long)lua_tonumber(L, 3)-1;
arg4 = THCudaTensor_new();
}
else if(narg == 4
&& (arg4 = (THCudaTensor *)(THCudaTensor *)luaT_toudata(L, 1, "torch.CudaTensor"))
&& (arg5 = (THCudaTensor *)(THCudaTensor *)luaT_toudata(L, 2, "torch.CudaTensor"))
&& lua_isnumber(L, 3)
&& lua_isnumber(L, 4)
)
{
argset = 2;
arg4_idx = 1;
arg6 = (float)lua_tonumber(L, 3);
arg7 = (long)lua_tonumber(L, 4)-1;
}
else
luaL_error(L, "expected arguments: CudaTensor [float] | [*CudaTensor*] CudaTensor float index");
if(argset == 1)
{
arg3 = THCudaTensor_normall(arg1,arg2);
lua_pushnumber(L, (lua_Number)arg3);
return 1;
}
else if(argset == 2)
{
if(arg4_idx)
lua_pushvalue(L, arg4_idx);
else
luaT_pushudata(L, arg4, "torch.CudaTensor");
THCudaTensor_norm(arg4,arg5,arg6,arg7);
return 1;
}
return 0;
}

static int cutorch_CudaTensor_renorm(lua_State *L)
{
int narg = lua_gettop(L);
THCudaTensor *arg1 = NULL;
int arg1_idx = 0;
THCudaTensor *arg2 = NULL;
float arg3 = 0;
long arg4 = 0;
float arg5 = 0;
if(narg == 4
&& (arg1 = (THCudaTensor *)(THCudaTensor *)luaT_toudata(L, 1, "torch.CudaTensor"))
&& lua_isnumber(L, 2)
&& lua_isnumber(L, 3)
&& lua_isnumber(L, 4)
)
{
arg1_idx = 1;
arg3 = (float)lua_tonumber(L, 2);
arg4 = (long)lua_tonumber(L, 3)-1;
arg5 = (float)lua_tonumber(L, 4);
arg2 = arg1;
}
else if(narg == 5
&& (arg1 = (THCudaTensor *)(THCudaTensor *)luaT_toudata(L, 1, "torch.CudaTensor"))
&& (arg2 = (THCudaTensor *)(THCudaTensor *)luaT_toudata(L, 2, "torch.CudaTensor"))
&& lua_isnumber(L, 3)
&& lua_isnumber(L, 4)
&& lua_isnumber(L, 5)
)
{
arg1_idx = 1;
arg3 = (float)lua_tonumber(L, 3);
arg4 = (long)lua_tonumber(L, 4)-1;
arg5 = (float)lua_tonumber(L, 5);
}
else
luaL_error(L, "expected arguments: *CudaTensor* [CudaTensor] float index float");
lua_pushvalue(L, arg1_idx);
THCudaTensor_renorm(arg1,arg2,arg3,arg4,arg5);
return 1;
}

static int cutorch_CudaTensor_dist(lua_State *L)
{
int narg = lua_gettop(L);
THCudaTensor *arg1 = NULL;
THCudaTensor *arg2 = NULL;
float arg3 = 2;
float arg4 = 0;
if(narg == 2
&& (arg1 = (THCudaTensor *)(THCudaTensor *)luaT_toudata(L, 1, "torch.CudaTensor"))
&& (arg2 = (THCudaTensor *)(THCudaTensor *)luaT_toudata(L, 2, "torch.CudaTensor"))
)
{
}
else if(narg == 3
&& (arg1 = (THCudaTensor *)(THCudaTensor *)luaT_toudata(L, 1, "torch.CudaTensor"))
&& (arg2 = (THCudaTensor *)(THCudaTensor *)luaT_toudata(L, 2, "torch.CudaTensor"))
&& lua_isnumber(L, 3)
)
{
arg3 = (float)lua_tonumber(L, 3);
}
else
luaL_error(L, "expected arguments: CudaTensor CudaTensor [float]");
arg4 = THCudaTensor_dist(arg1,arg2,arg3);
lua_pushnumber(L, (lua_Number)arg4);
return 1;
}

static int cutorch_CudaTensor_squeeze(lua_State *L)
{
int narg = lua_gettop(L);
int argset = 0;
THCudaTensor *arg1 = NULL;
int arg1_idx = 0;
THCudaTensor *arg2 = NULL;
THCudaTensor *arg3 = NULL;
int arg3_idx = 0;
THCudaTensor *arg4 = NULL;
long arg5 = 0;
if(narg == 1
&& (arg2 = (THCudaTensor *)(THCudaTensor *)luaT_toudata(L, 1, "torch.CudaTensor"))
)
{
argset = 1;
arg1 = THCudaTensor_new();
}
else if(narg == 2
&& (arg1 = (THCudaTensor *)(THCudaTensor *)luaT_toudata(L, 1, "torch.CudaTensor"))
&& (arg2 = (THCudaTensor *)(THCudaTensor *)luaT_toudata(L, 2, "torch.CudaTensor"))
)
{
argset = 1;
arg1_idx = 1;
}
else if(narg == 2
&& (arg4 = (THCudaTensor *)(THCudaTensor *)luaT_toudata(L, 1, "torch.CudaTensor"))
&& lua_isnumber(L, 2)
)
{
argset = 2;
arg5 = (long)lua_tonumber(L, 2)-1;
arg3 = THCudaTensor_new();
}
else if(narg == 3
&& (arg3 = (THCudaTensor *)(THCudaTensor *)luaT_toudata(L, 1, "torch.CudaTensor"))
&& (arg4 = (THCudaTensor *)(THCudaTensor *)luaT_toudata(L, 2, "torch.CudaTensor"))
&& lua_isnumber(L, 3)
)
{
argset = 2;
arg3_idx = 1;
arg5 = (long)lua_tonumber(L, 3)-1;
}
else
luaL_error(L, "expected arguments: [*CudaTensor*] CudaTensor | [*CudaTensor*] CudaTensor index");
if(argset == 1)
{
if(arg1_idx)
lua_pushvalue(L, arg1_idx);
else
luaT_pushudata(L, arg1, "torch.CudaTensor");
THCudaTensor_squeeze(arg1,arg2);
if(arg1->nDimension == 1 && arg1->size[0] == 1)
lua_pushnumber(L, (lua_Number)(*THCudaTensor_data(arg1)));
return 1;
}
else if(argset == 2)
{
if(arg3_idx)
lua_pushvalue(L, arg3_idx);
else
luaT_pushudata(L, arg3, "torch.CudaTensor");
{int hasdims = arg4->nDimension > 1;
THCudaTensor_squeeze1d(arg3,arg4,arg5);
if(!hasdims && arg3->nDimension == 1 && arg3->size[0] == 1)
lua_pushnumber(L, (lua_Number)(*THCudaTensor_data(arg3)));}
return 1;
}
return 0;
}

static const struct luaL_Reg cutorch_CudaTensorMath__ [] = {
{"zero", cutorch_CudaTensor_zero},
{"fill", cutorch_CudaTensor_fill},
{"add", cutorch_CudaTensor_add},
{"mul", cutorch_CudaTensor_mul},
{"div", cutorch_CudaTensor_div},
{"cmul", cutorch_CudaTensor_cmul},
{"cdiv", cutorch_CudaTensor_cdiv},
{"addcmul", cutorch_CudaTensor_addcmul},
{"addcdiv", cutorch_CudaTensor_addcdiv},
{"dot", cutorch_CudaTensor_dot},
{"min", cutorch_CudaTensor_min},
{"max", cutorch_CudaTensor_max},
{"sum", cutorch_CudaTensor_sum},
{"addmv", cutorch_CudaTensor_addmv},
{"addmm", cutorch_CudaTensor_addmm},
{"addr", cutorch_CudaTensor_addr},
{"log", cutorch_CudaTensor_log},
{"log1p", cutorch_CudaTensor_log1p},
{"exp", cutorch_CudaTensor_exp},
{"cos", cutorch_CudaTensor_cos},
{"acos", cutorch_CudaTensor_acos},
{"cosh", cutorch_CudaTensor_cosh},
{"sin", cutorch_CudaTensor_sin},
{"asin", cutorch_CudaTensor_asin},
{"sinh", cutorch_CudaTensor_sinh},
{"tan", cutorch_CudaTensor_tan},
{"atan", cutorch_CudaTensor_atan},
{"tanh", cutorch_CudaTensor_tanh},
{"sqrt", cutorch_CudaTensor_sqrt},
{"ceil", cutorch_CudaTensor_ceil},
{"floor", cutorch_CudaTensor_floor},
{"abs", cutorch_CudaTensor_abs},
{"sign", cutorch_CudaTensor_sign},
{"pow", cutorch_CudaTensor_pow},
{"clamp", cutorch_CudaTensor_clamp},
{"lt", cutorch_CudaTensor_lt},
{"gt", cutorch_CudaTensor_gt},
{"le", cutorch_CudaTensor_le},
{"ge", cutorch_CudaTensor_ge},
{"eq", cutorch_CudaTensor_eq},
{"ne", cutorch_CudaTensor_ne},
{"geometric", cutorch_CudaTensor_geometric},
{"bernoulli", cutorch_CudaTensor_bernoulli},
{"uniform", cutorch_CudaTensor_uniform},
{"normal", cutorch_CudaTensor_normal},
{"cauchy", cutorch_CudaTensor_cauchy},
{"logNormal", cutorch_CudaTensor_logNormal},
{"exponential", cutorch_CudaTensor_exponential},
{"mean", cutorch_CudaTensor_mean},
{"var", cutorch_CudaTensor_var},
{"std", cutorch_CudaTensor_std},
{"norm", cutorch_CudaTensor_norm},
{"renorm", cutorch_CudaTensor_renorm},
{"dist", cutorch_CudaTensor_dist},
{"squeeze", cutorch_CudaTensor_squeeze},
{NULL, NULL}
};

void cutorch_CudaTensorMath_init(lua_State *L)
{
  luaT_pushmetatable(L, "torch.CudaTensor");
  luaL_register(L, NULL, cutorch_CudaTensorMath__);
  lua_pop(L, 1);
}
