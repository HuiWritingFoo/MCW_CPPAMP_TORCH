CMAKE_MINIMUM_REQUIRED(VERSION 2.6 FATAL_ERROR)

CMAKE_POLICY(VERSION 2.6)

SET(CMAKE_MODULE_PATH "${CMAKE_CURRENT_SOURCE_DIR}/cmake" "${CMAKE_MODULE_PATH}")

FIND_PACKAGE(Torch REQUIRED)

ADD_SUBDIRECTORY(lib)

INCLUDE_DIRECTORIES("${CMAKE_CURRENT_SOURCE_DIR}/lib/THC")

INCLUDE_DIRECTORIES("${CMAKE_CURRENT_SOURCE_DIR}/torch")



SET(src Storage.cpp init.cpp Tensor.cpp TensorMath.cpp torch/utils.c)

# MCW CLAMP Specific. Version >= 0.3 is Must
 # MCW CLAMP Specific. Version >= 0.3 is Must
SET (OPENCL_INC "$ENV{AMDAPPSDKROOT}/include")
SET (OPENCL_LIB "$ENV{AMDAPPSDKROOT}/lib/x86_64")
SET (CLBLAS_INC "$ENV{CLBLASROOT}/include")
SET (CLBLAS_LIB "$ENV{CLBLASROOT}/lib64/")
SET (BOLT_SRC_INC "$ENV{BOLTROOT}/include/")
SET (BOOST_SRC_INC "$ENV{MCWCPPAMPROOT}/master-build/Bolt/superbuild/external/boost/src/Boost/")
SET (BOLT_VER_INC "$ENV{MCWCPPAMPROOT}/master-build/Bolt/superbuild/Bolt-build/include/")
SET (PREFIX "$ENV{MCWCPPAMPROOT}/gmac_exp_build")
SET (CLANG_AMP "${PREFIX}/compiler/bin/clang++")
SET (CLAMP_CONFIG "${PREFIX}/build/Release/bin/clamp-config")
execute_process(COMMAND ${CLAMP_CONFIG} --build --cxxflags
    OUTPUT_VARIABLE CLAMP_CXXFLAGS)
string(STRIP ${CLAMP_CXXFLAGS} CLAMP_CXXFLAGS)
set (CLAMP_CXXFLAGS "${CLAMP_CXXFLAGS} -I${OPENCL_INC}")
execute_process(COMMAND ${CLAMP_CONFIG} --build --ldflags
    OUTPUT_VARIABLE CLAMP_LDFLAGS)
string(STRIP ${CLAMP_LDFLAGS} CLAMP_LDFLAGS)
set (CLAMP_CXXFLAGS "${CLAMP_CXXFLAGS} -I${OPENCL_INC} -I${CLBLAS_INC} -I${BOLT_SRC_INC} -I${BOLT_VER_INC} -I${BOOST_SRC_INC}")
set (CLAMP_LDFLAGS "${CLAMP_LDFLAGS} -L${OPENCL_LIB} -L${CLBLAS_LIB}")



SET_PROPERTY(SOURCE Storage.cpp APPEND_STRING PROPERTY COMPILE_FLAGS " ${CLAMP_CXXFLAGS}")
SET_PROPERTY(SOURCE init.cpp APPEND_STRING PROPERTY COMPILE_FLAGS " ${CLAMP_CXXFLAGS}")
SET_PROPERTY(SOURCE Tensor.cpp APPEND_STRING PROPERTY COMPILE_FLAGS " ${CLAMP_CXXFLAGS}")
SET_PROPERTY(SOURCE TensorMath.cpp APPEND_STRING PROPERTY COMPILE_FLAGS " ${CLAMP_CXXFLAGS}")

SET(luasrc init.lua Tensor.lua FFI.lua test/test.lua)

ADD_TORCH_WRAP(clamptensormathwrap TensorMath.lua)
  
ADD_TORCH_PACKAGE(gputorch "${src}" "${luasrc}")

SET_PROPERTY(TARGET gputorch APPEND_STRING PROPERTY LINK_FLAGS " ${CLAMP_LDFLAGS} ${CLAMP_SHAREDFLAGS}")
TARGET_LINK_LIBRARIES(gputorch luaT THC)
