/* WARNING: autogenerated file */

#include "THC.h"
#include "luaT.h"
#include "utils.h"


static int clamptorch_CampTensor_zero(lua_State *L)
{
    int narg = lua_gettop(L);
    THCampTensor *arg1 = NULL;
    int arg1_idx = 0;
    if(narg == 1 && (arg1 = (THCampTensor *)luaT_toudata(L, 1, "torch.CampTensor")))
    {
        arg1_idx = 1;
    }
    else
       luaL_error(L, "expected arguments: *CampTensor*");
    lua_pushvalue(L, arg1_idx);
    THCampTensor_zero(arg1);
    return 1;
}

static int clamptorch_CampTensor_fill(lua_State *L)
{
    int narg = lua_gettop(L);
    THCampTensor *arg1 = NULL;
    int arg1_idx = 0;
    float arg2 = 0;
    if(narg == 2 && (arg1 = (THCampTensor *)luaT_toudata(L, 1, "torch.CampTensor")) && lua_isnumber(L, 2))
    {
        arg1_idx = 1;
        arg2 = (float)lua_tonumber(L, 2);
    }
    else
        luaL_error(L, "expected arguments: *CampTensor* float");
    lua_pushvalue(L, arg1_idx);
    THCampTensor_fill(arg1,arg2);
    return 1;
}

static int clamptorch_CampTensor_add(lua_State *L)
{
int narg = lua_gettop(L);
int argset = 0;
THCampTensor *arg1 = NULL;
int arg1_idx = 0;
float arg2 = 0;
THCampTensor *arg3 = NULL;
int arg3_idx = 0;
float arg4 = 1;
THCampTensor *arg5 = NULL;
THCampTensor *arg6 = NULL;
int arg6_idx = 0;
THCampTensor *arg7 = NULL;
float arg8 = 1;
THCampTensor *arg9 = NULL;
if(narg == 2
&& (arg1 = (THCampTensor *)luaT_toudata(L, 1, "torch.CampTensor"))
&& lua_isnumber(L, 2)
)
{
argset = 1;
arg1_idx = 1;
arg2 = (float)lua_tonumber(L, 2);
}
else if(narg == 2
&& (arg3 = (THCampTensor *)luaT_toudata(L, 1, "torch.CampTensor"))
&& (arg5 = (THCampTensor *)luaT_toudata(L, 2, "torch.CampTensor"))
)
{
argset = 2;
arg3_idx = 1;
}
else if(narg == 3
&& (arg3 = (THCampTensor *)luaT_toudata(L, 1, "torch.CampTensor"))
&& lua_isnumber(L, 2)
&& (arg5 = (THCampTensor *)luaT_toudata(L, 3, "torch.CampTensor"))
)
{
argset = 2;
arg3_idx = 1;
arg4 = (float)lua_tonumber(L, 2);
}
else if(narg == 3
&& (arg6 = (THCampTensor *)luaT_toudata(L, 1, "torch.CampTensor"))
&& (arg7 = (THCampTensor *)luaT_toudata(L, 2, "torch.CampTensor"))
&& (arg9 = (THCampTensor *)luaT_toudata(L, 3, "torch.CampTensor"))
)
{
argset = 3;
arg6_idx = 1;
}
else if(narg == 4
&& (arg6 = (THCampTensor *)luaT_toudata(L, 1, "torch.CampTensor"))
&& (arg7 = (THCampTensor *)luaT_toudata(L, 2, "torch.CampTensor"))
&& lua_isnumber(L, 3)
&& (arg9 = (THCampTensor *)luaT_toudata(L, 4, "torch.CampTensor"))
)
{
argset = 3;
arg6_idx = 1;
arg8 = (float)lua_tonumber(L, 3);
}
else
luaL_error(L, "expected arguments: *CampTensor* float | *CampTensor* [float] CampTensor | *CampTensor* CampTensor [float] CampTensor");
if(argset == 1)
{
lua_pushvalue(L, arg1_idx);
THCampTensor_add(arg1,arg2);
return 1;
}
else if(argset == 2)
{
lua_pushvalue(L, arg3_idx);
THCampTensor_cadd(arg3,arg4,arg5);
return 1;
}
else if(argset == 3)
{
lua_pushvalue(L, arg6_idx);
THCampTensor_cadd_tst(arg6,arg7,arg8,arg9);
return 1;
}
return 0;
}

static int clamptorch_CampTensor_mul(lua_State *L)
{
int narg = lua_gettop(L);
THCampTensor *arg1 = NULL;
int arg1_idx = 0;
float arg2 = 0;
if(narg == 2
&& (arg1 =(THCampTensor *) luaT_toudata(L, 1, "torch.CampTensor"))
&& lua_isnumber(L, 2)
)
{
arg1_idx = 1;
arg2 = (float)lua_tonumber(L, 2);
}
else
luaL_error(L, "expected arguments: *CampTensor* float");
lua_pushvalue(L, arg1_idx);
THCampTensor_mul(arg1,arg2);
return 1;
}

static int clamptorch_CampTensor_div(lua_State *L)
{
int narg = lua_gettop(L);
THCampTensor *arg1 = NULL;
int arg1_idx = 0;
float arg2 = 0;
if(narg == 2
&& (arg1 = (THCampTensor *)luaT_toudata(L, 1, "torch.CampTensor"))
&& lua_isnumber(L, 2)
)
{
arg1_idx = 1;
arg2 = (float)lua_tonumber(L, 2);
}
else
luaL_error(L, "expected arguments: *CampTensor* float");
lua_pushvalue(L, arg1_idx);
THCampTensor_div(arg1,arg2);
return 1;
}

static int clamptorch_CampTensor_cmul(lua_State *L)
{
int narg = lua_gettop(L);
THCampTensor *arg1 = NULL;
int arg1_idx = 0;
THCampTensor *arg2 = NULL;
THCampTensor *arg3 = NULL;
if(narg == 2
&& (arg1 = (THCampTensor *)luaT_toudata(L, 1, "torch.CampTensor"))
&& (arg3 = (THCampTensor *)luaT_toudata(L, 2, "torch.CampTensor"))
)
{
arg1_idx = 1;
arg2 = arg1;
}
else if(narg == 3
&& (arg1 = (THCampTensor *)luaT_toudata(L, 1, "torch.CampTensor"))
&& (arg2 = (THCampTensor *)luaT_toudata(L, 2, "torch.CampTensor"))
&& (arg3 = (THCampTensor *)luaT_toudata(L, 3, "torch.CampTensor"))
)
{
arg1_idx = 1;
}
else
luaL_error(L, "expected arguments: *CampTensor* [CampTensor] CampTensor");
lua_pushvalue(L, arg1_idx);
THCampTensor_cmul(arg1,arg2,arg3);
return 1;
}

static int clamptorch_CampTensor_cdiv(lua_State *L)
{
int narg = lua_gettop(L);
THCampTensor *arg1 = NULL;
int arg1_idx = 0;
THCampTensor *arg2 = NULL;
if(narg == 2
&& (arg1 = (THCampTensor *) luaT_toudata(L, 1, "torch.CampTensor"))
&& (arg2 = (THCampTensor *) luaT_toudata(L, 2, "torch.CampTensor"))
)
{
arg1_idx = 1;
}
else
luaL_error(L, "expected arguments: *CampTensor* CampTensor");
lua_pushvalue(L, arg1_idx);
THCampTensor_cdiv(arg1,arg2);
return 1;
}

static int clamptorch_CampTensor_addcmul(lua_State *L)
{
int narg = lua_gettop(L);
THCampTensor *arg1 = NULL;
int arg1_idx = 0;
float arg2 = 1;
THCampTensor *arg3 = NULL;
THCampTensor *arg4 = NULL;
if(narg == 3
&& (arg1 = (THCampTensor *) luaT_toudata(L, 1, "torch.CampTensor"))
&& (arg3 = (THCampTensor *) luaT_toudata(L, 2, "torch.CampTensor"))
&& (arg4 = (THCampTensor *) luaT_toudata(L, 3, "torch.CampTensor"))
)
{
arg1_idx = 1;
}
else if(narg == 4
&& (arg1 = (THCampTensor *) luaT_toudata(L, 1, "torch.CampTensor"))
&& lua_isnumber(L, 2)
&& (arg3 = (THCampTensor *) luaT_toudata(L, 3, "torch.CampTensor"))
&& (arg4 = (THCampTensor *) luaT_toudata(L, 4, "torch.CampTensor"))
)
{
arg1_idx = 1;
arg2 = (float)lua_tonumber(L, 2);
}
else
luaL_error(L, "expected arguments: *CampTensor* [float] CampTensor CampTensor");
lua_pushvalue(L, arg1_idx);
THCampTensor_addcmul(arg1,arg2,arg3,arg4);
return 1;
}

static int clamptorch_CampTensor_addcdiv(lua_State *L)
{
int narg = lua_gettop(L);
THCampTensor *arg1 = NULL;
int arg1_idx = 0;
float arg2 = 1;
THCampTensor *arg3 = NULL;
THCampTensor *arg4 = NULL;
if(narg == 3
&& (arg1 = (THCampTensor *) luaT_toudata(L, 1, "torch.CampTensor"))
&& (arg3 = (THCampTensor *) luaT_toudata(L, 2, "torch.CampTensor"))
&& (arg4 = (THCampTensor *) luaT_toudata(L, 3, "torch.CampTensor"))
)
{
arg1_idx = 1;
}
else if(narg == 4
&& (arg1 = (THCampTensor *) luaT_toudata(L, 1, "torch.CampTensor"))
&& lua_isnumber(L, 2)
&& (arg3 = (THCampTensor *) luaT_toudata(L, 3, "torch.CampTensor"))
&& (arg4 = (THCampTensor *) luaT_toudata(L, 4, "torch.CampTensor"))
)
{
arg1_idx = 1;
arg2 = (float)lua_tonumber(L, 2);
}
else
luaL_error(L, "expected arguments: *CampTensor* [float] CampTensor CampTensor");
lua_pushvalue(L, arg1_idx);
THCampTensor_addcdiv(arg1,arg2,arg3,arg4);
return 1;
}

static int clamptorch_CampTensor_dot(lua_State *L)
{
int narg = lua_gettop(L);
THCampTensor *arg1 = NULL;
THCampTensor *arg2 = NULL;
float arg3 = 0;
if(narg == 2
&& (arg1 = (THCampTensor *) luaT_toudata(L, 1, "torch.CampTensor"))
&& (arg2 = (THCampTensor *) luaT_toudata(L, 2, "torch.CampTensor"))
)
{
}
else
luaL_error(L, "expected arguments: CampTensor CampTensor");
arg3 = THCampTensor_dot(arg1,arg2);
lua_pushnumber(L, (lua_Number)arg3);
return 1;
}

static int clamptorch_CampTensor_min(lua_State *L)
{
int narg = lua_gettop(L);
int argset = 0;
THCampTensor *arg1 = NULL;
float arg2 = 0;
THCampTensor *arg3 = NULL;
int arg3_idx = 0;
THCampTensor *arg4 = NULL;
long arg5 = 0;
if(narg == 1
&& (arg1 = (THCampTensor *) luaT_toudata(L, 1, "torch.CampTensor"))
)
{
argset = 1;
}
else if(narg == 2
&& (arg4 = (THCampTensor *) luaT_toudata(L, 1, "torch.CampTensor"))
&& lua_isnumber(L, 2)
)
{
argset = 2;
arg5 = (long)lua_tonumber(L, 2)-1;
arg3 = THCampTensor_new();
}
else if(narg == 3
&& (arg3 = (THCampTensor *) luaT_toudata(L, 1, "torch.CampTensor"))
&& (arg4 = (THCampTensor *) luaT_toudata(L, 2, "torch.CampTensor"))
&& lua_isnumber(L, 3)
)
{
argset = 2;
arg3_idx = 1;
arg5 = (long)lua_tonumber(L, 3)-1;
}
else
luaL_error(L, "expected arguments: CampTensor | [*CampTensor*] CampTensor index");
if(argset == 1)
{
arg2 = THCampTensor_minall(arg1);
lua_pushnumber(L, (lua_Number)arg2);
return 1;
}
else if(argset == 2)
{
if(arg3_idx)
lua_pushvalue(L, arg3_idx);
else
luaT_pushudata(L, arg3, "torch.CampTensor");
THCampTensor_min(arg3,arg4,arg5);
return 1;
}
return 0;
}

static int clamptorch_CampTensor_max(lua_State *L)
{
int narg = lua_gettop(L);
int argset = 0;
THCampTensor *arg1 = NULL;
float arg2 = 0;
THCampTensor *arg3 = NULL;
int arg3_idx = 0;
THCampTensor *arg4 = NULL;
long arg5 = 0;
if(narg == 1
&& (arg1 = (THCampTensor *) luaT_toudata(L, 1, "torch.CampTensor"))
)
{
argset = 1;
}
else if(narg == 2
&& (arg4 = (THCampTensor *) luaT_toudata(L, 1, "torch.CampTensor"))
&& lua_isnumber(L, 2)
)
{
argset = 2;
arg5 = (long)lua_tonumber(L, 2)-1;
arg3 = THCampTensor_new();
}
else if(narg == 3
&& (arg3 = (THCampTensor *) luaT_toudata(L, 1, "torch.CampTensor"))
&& (arg4 = (THCampTensor *) luaT_toudata(L, 2, "torch.CampTensor"))
&& lua_isnumber(L, 3)
)
{
argset = 2;
arg3_idx = 1;
arg5 = (long)lua_tonumber(L, 3)-1;
}
else
luaL_error(L, "expected arguments: CampTensor | [*CampTensor*] CampTensor index");
if(argset == 1)
{
arg2 = THCampTensor_maxall(arg1);
lua_pushnumber(L, (lua_Number)arg2);
return 1;
}
else if(argset == 2)
{
if(arg3_idx)
lua_pushvalue(L, arg3_idx);
else
luaT_pushudata(L, arg3, "torch.CampTensor");
THCampTensor_max(arg3,arg4,arg5);
return 1;
}
return 0;
}

static int clamptorch_CampTensor_sum(lua_State *L)
{
int narg = lua_gettop(L);
int argset = 0;
THCampTensor *arg1 = NULL;
float arg2 = 0;
THCampTensor *arg3 = NULL;
int arg3_idx = 0;
THCampTensor *arg4 = NULL;
long arg5 = 0;
if(narg == 1
&& (arg1 = (THCampTensor *) luaT_toudata(L, 1, "torch.CampTensor"))
)
{
argset = 1;
}
else if(narg == 2
&& (arg4 = (THCampTensor *) luaT_toudata(L, 1, "torch.CampTensor"))
&& lua_isnumber(L, 2)
)
{
argset = 2;
arg5 = (long)lua_tonumber(L, 2)-1;
arg3 = THCampTensor_new();
}
else if(narg == 3
&& (arg3 = (THCampTensor *) luaT_toudata(L, 1, "torch.CampTensor"))
&& (arg4 = (THCampTensor *) luaT_toudata(L, 2, "torch.CampTensor"))
&& lua_isnumber(L, 3)
)
{
argset = 2;
arg3_idx = 1;
arg5 = (long)lua_tonumber(L, 3)-1;
}
else
luaL_error(L, "expected arguments: CampTensor | [*CampTensor*] CampTensor index");
if(argset == 1)
{
arg2 = THCampTensor_sumall(arg1);
lua_pushnumber(L, (lua_Number)arg2);
return 1;
}
else if(argset == 2)
{
if(arg3_idx)
lua_pushvalue(L, arg3_idx);
else
luaT_pushudata(L, arg3, "torch.CampTensor");
THCampTensor_sum(arg3,arg4,arg5);
return 1;
}
return 0;
}

static int clamptorch_CampTensor_addmv(lua_State *L)
{
int narg = lua_gettop(L);
int argset = 0;
THCampTensor *arg1 = NULL;
int arg1_idx = 0;
float arg2 = 1;
float arg3 = 1;
THCampTensor *arg4 = NULL;
THCampTensor *arg5 = NULL;
THCampTensor *arg6 = NULL;
int arg6_idx = 0;
float arg7 = 0;
float arg8 = 0;
THCampTensor *arg9 = NULL;
THCampTensor *arg10 = NULL;
if(narg == 3
&& (arg1 = (THCampTensor *) luaT_toudata(L, 1, "torch.CampTensor"))
&& (arg4 = (THCampTensor *) luaT_toudata(L, 2, "torch.CampTensor"))
&& (arg5 = (THCampTensor *) luaT_toudata(L, 3, "torch.CampTensor"))
)
{
argset = 1;
arg1_idx = 1;
}
else if(narg == 4
&& (arg1 = (THCampTensor *) luaT_toudata(L, 1, "torch.CampTensor"))
&& lua_isnumber(L, 2)
&& (arg4 = (THCampTensor *) luaT_toudata(L, 3, "torch.CampTensor"))
&& (arg5 = (THCampTensor *) luaT_toudata(L, 4, "torch.CampTensor"))
)
{
argset = 1;
arg1_idx = 1;
arg3 = (float)lua_tonumber(L, 2);
}
else if(narg == 5
&& (arg6 = (THCampTensor *) luaT_toudata(L, 1, "torch.CampTensor"))
&& lua_isnumber(L, 2)
&& lua_isnumber(L, 3)
&& (arg9 = (THCampTensor *) luaT_toudata(L, 4, "torch.CampTensor"))
&& (arg10 = (THCampTensor *) luaT_toudata(L, 5, "torch.CampTensor"))
)
{
argset = 2;
arg6_idx = 1;
arg7 = (float)lua_tonumber(L, 2);
arg8 = (float)lua_tonumber(L, 3);
}
else
luaL_error(L, "expected arguments: *CampTensor* [float] CampTensor CampTensor | *CampTensor* float float CampTensor CampTensor");
if(argset == 1)
{
lua_pushvalue(L, arg1_idx);
THCampTensor_addmv(arg1,arg2,arg3,arg4,arg5);
return 1;
}
else if(argset == 2)
{
lua_pushvalue(L, arg6_idx);
THCampTensor_addmv(arg6,arg7,arg8,arg9,arg10);
return 1;
}
return 0;
}

static int clamptorch_CampTensor_addmm(lua_State *L)
{
int narg = lua_gettop(L);
int argset = 0;
THCampTensor *arg1 = NULL;
int arg1_idx = 0;
float arg2 = 1;
float arg3 = 1;
THCampTensor *arg4 = NULL;
THCampTensor *arg5 = NULL;
THCampTensor *arg6 = NULL;
int arg6_idx = 0;
float arg7 = 0;
float arg8 = 0;
THCampTensor *arg9 = NULL;
THCampTensor *arg10 = NULL;
if(narg == 3
&& (arg1 = (THCampTensor *) luaT_toudata(L, 1, "torch.CampTensor"))
&& (arg4 = (THCampTensor *) luaT_toudata(L, 2, "torch.CampTensor"))
&& (arg5 = (THCampTensor *) luaT_toudata(L, 3, "torch.CampTensor"))
)
{
argset = 1;
arg1_idx = 1;
}
else if(narg == 4
&& (arg1 = (THCampTensor *) luaT_toudata(L, 1, "torch.CampTensor"))
&& lua_isnumber(L, 2)
&& (arg4 = (THCampTensor *) luaT_toudata(L, 3, "torch.CampTensor"))
&& (arg5 = (THCampTensor *) luaT_toudata(L, 4, "torch.CampTensor"))
)
{
argset = 1;
arg1_idx = 1;
arg3 = (float)lua_tonumber(L, 2);
}
else if(narg == 5
&& (arg6 = (THCampTensor *) luaT_toudata(L, 1, "torch.CampTensor"))
&& lua_isnumber(L, 2)
&& lua_isnumber(L, 3)
&& (arg9 = (THCampTensor *) luaT_toudata(L, 4, "torch.CampTensor"))
&& (arg10 = (THCampTensor *) luaT_toudata(L, 5, "torch.CampTensor"))
)
{
argset = 2;
arg6_idx = 1;
arg7 = (float)lua_tonumber(L, 2);
arg8 = (float)lua_tonumber(L, 3);
}
else
luaL_error(L, "expected arguments: *CampTensor* [float] CampTensor CampTensor | *CampTensor* float float CampTensor CampTensor");
if(argset == 1)
{
lua_pushvalue(L, arg1_idx);
THCampTensor_addmm(arg1,arg2,arg3,arg4,arg5);
return 1;
}
else if(argset == 2)
{
lua_pushvalue(L, arg6_idx);
THCampTensor_addmm(arg6,arg7,arg8,arg9,arg10);
return 1;
}
return 0;
}

static int clamptorch_CampTensor_addr(lua_State *L)
{
int narg = lua_gettop(L);
THCampTensor *arg1 = NULL;
int arg1_idx = 0;
float arg2 = 1;
THCampTensor *arg3 = NULL;
THCampTensor *arg4 = NULL;
if(narg == 3
&& (arg1 = (THCampTensor *) luaT_toudata(L, 1, "torch.CampTensor"))
&& (arg3 = (THCampTensor *) luaT_toudata(L, 2, "torch.CampTensor"))
&& (arg4 = (THCampTensor *) luaT_toudata(L, 3, "torch.CampTensor"))
)
{
arg1_idx = 1;
}
else if(narg == 4
&& (arg1 = (THCampTensor *) luaT_toudata(L, 1, "torch.CampTensor"))
&& lua_isnumber(L, 2)
&& (arg3 = (THCampTensor *) luaT_toudata(L, 3, "torch.CampTensor"))
&& (arg4 = (THCampTensor *) luaT_toudata(L, 4, "torch.CampTensor"))
)
{
arg1_idx = 1;
arg2 = (float)lua_tonumber(L, 2);
}
else
luaL_error(L, "expected arguments: *CampTensor* [float] CampTensor CampTensor");
lua_pushvalue(L, arg1_idx);
THCampTensor_addr(arg1,arg2,arg3,arg4);
return 1;
}

static int clamptorch_CampTensor_log(lua_State *L)
{
int narg = lua_gettop(L);
THCampTensor *arg1 = NULL;
int arg1_idx = 0;
if(narg == 1
&& (arg1 = (THCampTensor *) luaT_toudata(L, 1, "torch.CampTensor"))
)
{
arg1_idx = 1;
}
else
luaL_error(L, "expected arguments: *CampTensor*");
lua_pushvalue(L, arg1_idx);
THCampTensor_log(arg1);
return 1;
}

static int clamptorch_CampTensor_log1p(lua_State *L)
{
int narg = lua_gettop(L);
THCampTensor *arg1 = NULL;
int arg1_idx = 0;
if(narg == 1
&& (arg1 = (THCampTensor *) luaT_toudata(L, 1, "torch.CampTensor"))
)
{
arg1_idx = 1;
}
else
luaL_error(L, "expected arguments: *CampTensor*");
lua_pushvalue(L, arg1_idx);
THCampTensor_log1p(arg1);
return 1;
}

static int clamptorch_CampTensor_exp(lua_State *L)
{
int narg = lua_gettop(L);
THCampTensor *arg1 = NULL;
int arg1_idx = 0;
if(narg == 1
&& (arg1 = (THCampTensor *) luaT_toudata(L, 1, "torch.CampTensor"))
)
{
arg1_idx = 1;
}
else
luaL_error(L, "expected arguments: *CampTensor*");
lua_pushvalue(L, arg1_idx);
THCampTensor_exp(arg1);
return 1;
}

static int clamptorch_CampTensor_cos(lua_State *L)
{
int narg = lua_gettop(L);
THCampTensor *arg1 = NULL;
int arg1_idx = 0;
if(narg == 1
&& (arg1 = (THCampTensor *) luaT_toudata(L, 1, "torch.CampTensor"))
)
{
arg1_idx = 1;
}
else
luaL_error(L, "expected arguments: *CampTensor*");
lua_pushvalue(L, arg1_idx);
THCampTensor_cos(arg1);
return 1;
}

static int clamptorch_CampTensor_acos(lua_State *L)
{
int narg = lua_gettop(L);
THCampTensor *arg1 = NULL;
int arg1_idx = 0;
if(narg == 1
&& (arg1 = (THCampTensor *) luaT_toudata(L, 1, "torch.CampTensor"))
)
{
arg1_idx = 1;
}
else
luaL_error(L, "expected arguments: *CampTensor*");
lua_pushvalue(L, arg1_idx);
THCampTensor_acos(arg1);
return 1;
}

static int clamptorch_CampTensor_cosh(lua_State *L)
{
int narg = lua_gettop(L);
THCampTensor *arg1 = NULL;
int arg1_idx = 0;
if(narg == 1
&& (arg1 = (THCampTensor *) luaT_toudata(L, 1, "torch.CampTensor"))
)
{
arg1_idx = 1;
}
else
luaL_error(L, "expected arguments: *CampTensor*");
lua_pushvalue(L, arg1_idx);
THCampTensor_cosh(arg1);
return 1;
}

static int clamptorch_CampTensor_sin(lua_State *L)
{
int narg = lua_gettop(L);
THCampTensor *arg1 = NULL;
int arg1_idx = 0;
if(narg == 1
&& (arg1 = (THCampTensor *) luaT_toudata(L, 1, "torch.CampTensor"))
)
{
arg1_idx = 1;
}
else
luaL_error(L, "expected arguments: *CampTensor*");
lua_pushvalue(L, arg1_idx);
THCampTensor_sin(arg1);
return 1;
}

static int clamptorch_CampTensor_asin(lua_State *L)
{
int narg = lua_gettop(L);
THCampTensor *arg1 = NULL;
int arg1_idx = 0;
if(narg == 1
&& (arg1 = (THCampTensor *) luaT_toudata(L, 1, "torch.CampTensor"))
)
{
arg1_idx = 1;
}
else
luaL_error(L, "expected arguments: *CampTensor*");
lua_pushvalue(L, arg1_idx);
THCampTensor_asin(arg1);
return 1;
}

static int clamptorch_CampTensor_sinh(lua_State *L)
{
int narg = lua_gettop(L);
THCampTensor *arg1 = NULL;
int arg1_idx = 0;
if(narg == 1
&& (arg1 = (THCampTensor *) luaT_toudata(L, 1, "torch.CampTensor"))
)
{
arg1_idx = 1;
}
else
luaL_error(L, "expected arguments: *CampTensor*");
lua_pushvalue(L, arg1_idx);
THCampTensor_sinh(arg1);
return 1;
}

static int clamptorch_CampTensor_tan(lua_State *L)
{
int narg = lua_gettop(L);
THCampTensor *arg1 = NULL;
int arg1_idx = 0;
if(narg == 1
&& (arg1 = (THCampTensor *)luaT_toudata(L, 1, "torch.CampTensor"))
)
{
arg1_idx = 1;
}
else
luaL_error(L, "expected arguments: *CampTensor*");
lua_pushvalue(L, arg1_idx);
THCampTensor_tan(arg1);
return 1;
}

static int clamptorch_CampTensor_atan(lua_State *L)
{
int narg = lua_gettop(L);
THCampTensor *arg1 = NULL;
int arg1_idx = 0;
if(narg == 1
&& (arg1 = (THCampTensor *) luaT_toudata(L, 1, "torch.CampTensor"))
)
{
arg1_idx = 1;
}
else
luaL_error(L, "expected arguments: *CampTensor*");
lua_pushvalue(L, arg1_idx);
THCampTensor_atan(arg1);
return 1;
}

static int clamptorch_CampTensor_tanh(lua_State *L)
{
int narg = lua_gettop(L);
THCampTensor *arg1 = NULL;
int arg1_idx = 0;
if(narg == 1
&& (arg1 = (THCampTensor *) luaT_toudata(L, 1, "torch.CampTensor"))
)
{
arg1_idx = 1;
}
else
luaL_error(L, "expected arguments: *CampTensor*");
lua_pushvalue(L, arg1_idx);
THCampTensor_tanh(arg1);
return 1;
}

static int clamptorch_CampTensor_sqrt(lua_State *L)
{
int narg = lua_gettop(L);
THCampTensor *arg1 = NULL;
int arg1_idx = 0;
if(narg == 1
&& (arg1 = (THCampTensor *) luaT_toudata(L, 1, "torch.CampTensor"))
)
{
arg1_idx = 1;
}
else
luaL_error(L, "expected arguments: *CampTensor*");
lua_pushvalue(L, arg1_idx);
THCampTensor_sqrt(arg1);
return 1;
}

static int clamptorch_CampTensor_ceil(lua_State *L)
{
int narg = lua_gettop(L);
THCampTensor *arg1 = NULL;
int arg1_idx = 0;
if(narg == 1
&& (arg1 = (THCampTensor *) luaT_toudata(L, 1, "torch.CampTensor"))
)
{
arg1_idx = 1;
}
else
luaL_error(L, "expected arguments: *CampTensor*");
lua_pushvalue(L, arg1_idx);
THCampTensor_ceil(arg1);
return 1;
}

static int clamptorch_CampTensor_floor(lua_State *L)
{
int narg = lua_gettop(L);
THCampTensor *arg1 = NULL;
int arg1_idx = 0;
if(narg == 1
&& (arg1 = luaT_toudata(L, 1, "torch.CampTensor"))
)
{
arg1_idx = 1;
}
else
luaL_error(L, "expected arguments: *CampTensor*");
lua_pushvalue(L, arg1_idx);
THCampTensor_floor(arg1);
return 1;
}

static int clamptorch_CampTensor_abs(lua_State *L)
{
int narg = lua_gettop(L);
THCampTensor *arg1 = NULL;
int arg1_idx = 0;
if(narg == 1
&& (arg1 = luaT_toudata(L, 1, "torch.CampTensor"))
)
{
arg1_idx = 1;
}
else
luaL_error(L, "expected arguments: *CampTensor*");
lua_pushvalue(L, arg1_idx);
THCampTensor_abs(arg1);
return 1;
}

static int clamptorch_CampTensor_pow(lua_State *L)
{
int narg = lua_gettop(L);
THCampTensor *arg1 = NULL;
int arg1_idx = 0;
THCampTensor *arg2 = NULL;
float arg3 = 0;
if(narg == 2
&& (arg1 = luaT_toudata(L, 1, "torch.CampTensor"))
&& lua_isnumber(L, 2)
)
{
arg1_idx = 1;
arg3 = (float)lua_tonumber(L, 2);
arg2 = arg1;
}
else if(narg == 3
&& (arg1 = luaT_toudata(L, 1, "torch.CampTensor"))
&& (arg2 = luaT_toudata(L, 2, "torch.CampTensor"))
&& lua_isnumber(L, 3)
)
{
arg1_idx = 1;
arg3 = (float)lua_tonumber(L, 3);
}
else
luaL_error(L, "expected arguments: *CampTensor* [CampTensor] float");
lua_pushvalue(L, arg1_idx);
THCampTensor_pow(arg1,arg2,arg3);
return 1;
}

static int clamptorch_CampTensor_lt(lua_State *L)
{
int narg = lua_gettop(L);
int argset = 0;
THCampTensor *arg1 = NULL;
int arg1_idx = 0;
THCampTensor *arg2 = NULL;
float arg3 = 0;
THCampTensor *arg4 = NULL;
int arg4_idx = 0;
THCampTensor *arg5 = NULL;
THCampTensor *arg6 = NULL;
if(narg == 3
&& (arg1 = luaT_toudata(L, 1, "torch.CampTensor"))
&& (arg2 = luaT_toudata(L, 2, "torch.CampTensor"))
&& lua_isnumber(L, 3)
)
{
argset = 1;
arg1_idx = 1;
arg3 = (float)lua_tonumber(L, 3);
}
else if(narg == 3
&& (arg4 = luaT_toudata(L, 1, "torch.CampTensor"))
&& (arg5 = luaT_toudata(L, 2, "torch.CampTensor"))
&& (arg6 = luaT_toudata(L, 3, "torch.CampTensor"))
)
{
argset = 2;
arg4_idx = 1;
}
else
luaL_error(L, "expected arguments: *CampTensor* CampTensor float | *CampTensor* CampTensor CampTensor");
if(argset == 1)
{
lua_pushvalue(L, arg1_idx);
THCampTensor_ltValue(arg1,arg2,arg3);
return 1;
}
else if(argset == 2)
{
lua_pushvalue(L, arg4_idx);
THCampTensor_ltTensor(arg4,arg5,arg6);
return 1;
}
return 0;
}

static int clamptorch_CampTensor_gt(lua_State *L)
{
int narg = lua_gettop(L);
int argset = 0;
THCampTensor *arg1 = NULL;
int arg1_idx = 0;
THCampTensor *arg2 = NULL;
float arg3 = 0;
THCampTensor *arg4 = NULL;
int arg4_idx = 0;
THCampTensor *arg5 = NULL;
THCampTensor *arg6 = NULL;
if(narg == 3
&& (arg1 = luaT_toudata(L, 1, "torch.CampTensor"))
&& (arg2 = luaT_toudata(L, 2, "torch.CampTensor"))
&& lua_isnumber(L, 3)
)
{
argset = 1;
arg1_idx = 1;
arg3 = (float)lua_tonumber(L, 3);
}
else if(narg == 3
&& (arg4 = luaT_toudata(L, 1, "torch.CampTensor"))
&& (arg5 = luaT_toudata(L, 2, "torch.CampTensor"))
&& (arg6 = luaT_toudata(L, 3, "torch.CampTensor"))
)
{
argset = 2;
arg4_idx = 1;
}
else
luaL_error(L, "expected arguments: *CampTensor* CampTensor float | *CampTensor* CampTensor CampTensor");
if(argset == 1)
{
lua_pushvalue(L, arg1_idx);
THCampTensor_gtValue(arg1,arg2,arg3);
return 1;
}
else if(argset == 2)
{
lua_pushvalue(L, arg4_idx);
THCampTensor_gtTensor(arg4,arg5,arg6);
return 1;
}
return 0;
}

static int clamptorch_CampTensor_le(lua_State *L)
{
int narg = lua_gettop(L);
int argset = 0;
THCampTensor *arg1 = NULL;
int arg1_idx = 0;
THCampTensor *arg2 = NULL;
float arg3 = 0;
THCampTensor *arg4 = NULL;
int arg4_idx = 0;
THCampTensor *arg5 = NULL;
THCampTensor *arg6 = NULL;
if(narg == 3
&& (arg1 = luaT_toudata(L, 1, "torch.CampTensor"))
&& (arg2 = luaT_toudata(L, 2, "torch.CampTensor"))
&& lua_isnumber(L, 3)
)
{
argset = 1;
arg1_idx = 1;
arg3 = (float)lua_tonumber(L, 3);
}
else if(narg == 3
&& (arg4 = luaT_toudata(L, 1, "torch.CampTensor"))
&& (arg5 = luaT_toudata(L, 2, "torch.CampTensor"))
&& (arg6 = luaT_toudata(L, 3, "torch.CampTensor"))
)
{
argset = 2;
arg4_idx = 1;
}
else
luaL_error(L, "expected arguments: *CampTensor* CampTensor float | *CampTensor* CampTensor CampTensor");
if(argset == 1)
{
lua_pushvalue(L, arg1_idx);
THCampTensor_leValue(arg1,arg2,arg3);
return 1;
}
else if(argset == 2)
{
lua_pushvalue(L, arg4_idx);
THCampTensor_leTensor(arg4,arg5,arg6);
return 1;
}
return 0;
}

static int clamptorch_CampTensor_ge(lua_State *L)
{
int narg = lua_gettop(L);
int argset = 0;
THCampTensor *arg1 = NULL;
int arg1_idx = 0;
THCampTensor *arg2 = NULL;
float arg3 = 0;
THCampTensor *arg4 = NULL;
int arg4_idx = 0;
THCampTensor *arg5 = NULL;
THCampTensor *arg6 = NULL;
if(narg == 3
&& (arg1 = luaT_toudata(L, 1, "torch.CampTensor"))
&& (arg2 = luaT_toudata(L, 2, "torch.CampTensor"))
&& lua_isnumber(L, 3)
)
{
argset = 1;
arg1_idx = 1;
arg3 = (float)lua_tonumber(L, 3);
}
else if(narg == 3
&& (arg4 = luaT_toudata(L, 1, "torch.CampTensor"))
&& (arg5 = luaT_toudata(L, 2, "torch.CampTensor"))
&& (arg6 = luaT_toudata(L, 3, "torch.CampTensor"))
)
{
argset = 2;
arg4_idx = 1;
}
else
luaL_error(L, "expected arguments: *CampTensor* CampTensor float | *CampTensor* CampTensor CampTensor");
if(argset == 1)
{
lua_pushvalue(L, arg1_idx);
THCampTensor_geValue(arg1,arg2,arg3);
return 1;
}
else if(argset == 2)
{
lua_pushvalue(L, arg4_idx);
THCampTensor_geTensor(arg4,arg5,arg6);
return 1;
}
return 0;
}

static int clamptorch_CampTensor_eq(lua_State *L)
{
int narg = lua_gettop(L);
int argset = 0;
THCampTensor *arg1 = NULL;
int arg1_idx = 0;
THCampTensor *arg2 = NULL;
float arg3 = 0;
THCampTensor *arg4 = NULL;
int arg4_idx = 0;
THCampTensor *arg5 = NULL;
THCampTensor *arg6 = NULL;
if(narg == 3
&& (arg1 = luaT_toudata(L, 1, "torch.CampTensor"))
&& (arg2 = luaT_toudata(L, 2, "torch.CampTensor"))
&& lua_isnumber(L, 3)
)
{
argset = 1;
arg1_idx = 1;
arg3 = (float)lua_tonumber(L, 3);
}
else if(narg == 3
&& (arg4 = luaT_toudata(L, 1, "torch.CampTensor"))
&& (arg5 = luaT_toudata(L, 2, "torch.CampTensor"))
&& (arg6 = luaT_toudata(L, 3, "torch.CampTensor"))
)
{
argset = 2;
arg4_idx = 1;
}
else
luaL_error(L, "expected arguments: *CampTensor* CampTensor float | *CampTensor* CampTensor CampTensor");
if(argset == 1)
{
lua_pushvalue(L, arg1_idx);
THCampTensor_eqValue(arg1,arg2,arg3);
return 1;
}
else if(argset == 2)
{
lua_pushvalue(L, arg4_idx);
THCampTensor_eqTensor(arg4,arg5,arg6);
return 1;
}
return 0;
}

static int clamptorch_CampTensor_ne(lua_State *L)
{
int narg = lua_gettop(L);
int argset = 0;
THCampTensor *arg1 = NULL;
int arg1_idx = 0;
THCampTensor *arg2 = NULL;
float arg3 = 0;
THCampTensor *arg4 = NULL;
int arg4_idx = 0;
THCampTensor *arg5 = NULL;
THCampTensor *arg6 = NULL;
if(narg == 3
&& (arg1 = luaT_toudata(L, 1, "torch.CampTensor"))
&& (arg2 = luaT_toudata(L, 2, "torch.CampTensor"))
&& lua_isnumber(L, 3)
)
{
argset = 1;
arg1_idx = 1;
arg3 = (float)lua_tonumber(L, 3);
}
else if(narg == 3
&& (arg4 = luaT_toudata(L, 1, "torch.CampTensor"))
&& (arg5 = luaT_toudata(L, 2, "torch.CampTensor"))
&& (arg6 = luaT_toudata(L, 3, "torch.CampTensor"))
)
{
argset = 2;
arg4_idx = 1;
}
else
luaL_error(L, "expected arguments: *CampTensor* CampTensor float | *CampTensor* CampTensor CampTensor");
if(argset == 1)
{
lua_pushvalue(L, arg1_idx);
THCampTensor_neValue(arg1,arg2,arg3);
return 1;
}
else if(argset == 2)
{
lua_pushvalue(L, arg4_idx);
THCampTensor_neTensor(arg4,arg5,arg6);
return 1;
}
return 0;
}

static int clamptorch_CampTensor_geometric(lua_State *L)
{
int narg = lua_gettop(L);
THCampTensor *arg1 = NULL;
int arg1_idx = 0;
float arg2 = 0;
if(narg == 2
&& (arg1 = luaT_toudata(L, 1, "torch.CampTensor"))
&& lua_isnumber(L, 2)
)
{
arg1_idx = 1;
arg2 = (float)lua_tonumber(L, 2);
}
else
luaL_error(L, "expected arguments: *CampTensor* float");
lua_pushvalue(L, arg1_idx);
THCampTensor_geometric(arg1,arg2);
return 1;
}

static int clamptorch_CampTensor_bernoulli(lua_State *L)
{
int narg = lua_gettop(L);
THCampTensor *arg1 = NULL;
int arg1_idx = 0;
float arg2 = 0;
if(narg == 1
&& (arg1 = luaT_toudata(L, 1, "torch.CampTensor"))
)
{
arg1_idx = 1;
}
else if(narg == 2
&& (arg1 = luaT_toudata(L, 1, "torch.CampTensor"))
&& lua_isnumber(L, 2)
)
{
arg1_idx = 1;
arg2 = (float)lua_tonumber(L, 2);
}
else
luaL_error(L, "expected arguments: *CampTensor* [float]");
lua_pushvalue(L, arg1_idx);
THCampTensor_bernoulli(arg1,arg2);
return 1;
}

static int clamptorch_CampTensor_uniform(lua_State *L)
{
int narg = lua_gettop(L);
THCampTensor *arg1 = NULL;
int arg1_idx = 0;
float arg2 = 0;
float arg3 = 1;
if(narg == 1
&& (arg1 = luaT_toudata(L, 1, "torch.CampTensor"))
)
{
arg1_idx = 1;
}
else if(narg == 2
&& (arg1 = luaT_toudata(L, 1, "torch.CampTensor"))
&& lua_isnumber(L, 2)
)
{
arg1_idx = 1;
arg2 = (float)lua_tonumber(L, 2);
}
else if(narg == 2
&& (arg1 = luaT_toudata(L, 1, "torch.CampTensor"))
&& lua_isnumber(L, 2)
)
{
arg1_idx = 1;
arg3 = (float)lua_tonumber(L, 2);
}
else if(narg == 3
&& (arg1 = luaT_toudata(L, 1, "torch.CampTensor"))
&& lua_isnumber(L, 2)
&& lua_isnumber(L, 3)
)
{
arg1_idx = 1;
arg2 = (float)lua_tonumber(L, 2);
arg3 = (float)lua_tonumber(L, 3);
}
else
luaL_error(L, "expected arguments: *CampTensor* [float] [float]");
lua_pushvalue(L, arg1_idx);
THCampTensor_uniform(arg1,arg2,arg3);
return 1;
}

static int clamptorch_CampTensor_normal(lua_State *L)
{
int narg = lua_gettop(L);
THCampTensor *arg1 = NULL;
int arg1_idx = 0;
float arg2 = 0;
float arg3 = 1;
if(narg == 1
&& (arg1 = luaT_toudata(L, 1, "torch.CampTensor"))
)
{
arg1_idx = 1;
}
else if(narg == 2
&& (arg1 = luaT_toudata(L, 1, "torch.CampTensor"))
&& lua_isnumber(L, 2)
)
{
arg1_idx = 1;
arg2 = (float)lua_tonumber(L, 2);
}
else if(narg == 2
&& (arg1 = luaT_toudata(L, 1, "torch.CampTensor"))
&& lua_isnumber(L, 2)
)
{
arg1_idx = 1;
arg3 = (float)lua_tonumber(L, 2);
}
else if(narg == 3
&& (arg1 = luaT_toudata(L, 1, "torch.CampTensor"))
&& lua_isnumber(L, 2)
&& lua_isnumber(L, 3)
)
{
arg1_idx = 1;
arg2 = (float)lua_tonumber(L, 2);
arg3 = (float)lua_tonumber(L, 3);
}
else
luaL_error(L, "expected arguments: *CampTensor* [float] [float]");
lua_pushvalue(L, arg1_idx);
THCampTensor_normal(arg1,arg2,arg3);
return 1;
}

static int clamptorch_CampTensor_cauchy(lua_State *L)
{
int narg = lua_gettop(L);
THCampTensor *arg1 = NULL;
int arg1_idx = 0;
float arg2 = 0;
float arg3 = 1;
if(narg == 1
&& (arg1 = luaT_toudata(L, 1, "torch.CampTensor"))
)
{
arg1_idx = 1;
}
else if(narg == 2
&& (arg1 = luaT_toudata(L, 1, "torch.CampTensor"))
&& lua_isnumber(L, 2)
)
{
arg1_idx = 1;
arg2 = (float)lua_tonumber(L, 2);
}
else if(narg == 2
&& (arg1 = luaT_toudata(L, 1, "torch.CampTensor"))
&& lua_isnumber(L, 2)
)
{
arg1_idx = 1;
arg3 = (float)lua_tonumber(L, 2);
}
else if(narg == 3
&& (arg1 = luaT_toudata(L, 1, "torch.CampTensor"))
&& lua_isnumber(L, 2)
&& lua_isnumber(L, 3)
)
{
arg1_idx = 1;
arg2 = (float)lua_tonumber(L, 2);
arg3 = (float)lua_tonumber(L, 3);
}
else
luaL_error(L, "expected arguments: *CampTensor* [float] [float]");
lua_pushvalue(L, arg1_idx);
THCampTensor_cauchy(arg1,arg2,arg3);
return 1;
}

static int clamptorch_CampTensor_logNormal(lua_State *L)
{
int narg = lua_gettop(L);
THCampTensor *arg1 = NULL;
int arg1_idx = 0;
float arg2 = 1;
float arg3 = 2;
if(narg == 1
&& (arg1 = luaT_toudata(L, 1, "torch.CampTensor"))
)
{
arg1_idx = 1;
}
else if(narg == 2
&& (arg1 = luaT_toudata(L, 1, "torch.CampTensor"))
&& lua_isnumber(L, 2)
)
{
arg1_idx = 1;
arg2 = (float)lua_tonumber(L, 2);
}
else if(narg == 2
&& (arg1 = luaT_toudata(L, 1, "torch.CampTensor"))
&& lua_isnumber(L, 2)
)
{
arg1_idx = 1;
arg3 = (float)lua_tonumber(L, 2);
}
else if(narg == 3
&& (arg1 = luaT_toudata(L, 1, "torch.CampTensor"))
&& lua_isnumber(L, 2)
&& lua_isnumber(L, 3)
)
{
arg1_idx = 1;
arg2 = (float)lua_tonumber(L, 2);
arg3 = (float)lua_tonumber(L, 3);
}
else
luaL_error(L, "expected arguments: *CampTensor* [float] [float]");
lua_pushvalue(L, arg1_idx);
THCampTensor_logNormal(arg1,arg2,arg3);
return 1;
}

static int clamptorch_CampTensor_exponential(lua_State *L)
{
int narg = lua_gettop(L);
THCampTensor *arg1 = NULL;
int arg1_idx = 0;
float arg2 = 0;
if(narg == 2
&& (arg1 = luaT_toudata(L, 1, "torch.CampTensor"))
&& lua_isnumber(L, 2)
)
{
arg1_idx = 1;
arg2 = (float)lua_tonumber(L, 2);
}
else
luaL_error(L, "expected arguments: *CampTensor* float");
lua_pushvalue(L, arg1_idx);
THCampTensor_exponential(arg1,arg2);
return 1;
}

static int clamptorch_CampTensor_mean(lua_State *L)
{
int narg = lua_gettop(L);
int argset = 0;
THCampTensor *arg1 = NULL;
float arg2 = 0;
THCampTensor *arg3 = NULL;
int arg3_idx = 0;
THCampTensor *arg4 = NULL;
long arg5 = 0;
if(narg == 1
&& (arg1 = luaT_toudata(L, 1, "torch.CampTensor"))
)
{
argset = 1;
}
else if(narg == 2
&& (arg4 = luaT_toudata(L, 1, "torch.CampTensor"))
&& lua_isnumber(L, 2)
)
{
argset = 2;
arg5 = (long)lua_tonumber(L, 2)-1;
arg3 = THCampTensor_new();
}
else if(narg == 3
&& (arg3 = luaT_toudata(L, 1, "torch.CampTensor"))
&& (arg4 = luaT_toudata(L, 2, "torch.CampTensor"))
&& lua_isnumber(L, 3)
)
{
argset = 2;
arg3_idx = 1;
arg5 = (long)lua_tonumber(L, 3)-1;
}
else
luaL_error(L, "expected arguments: CampTensor | [*CampTensor*] CampTensor index");
if(argset == 1)
{
arg2 = THCampTensor_meanall(arg1);
lua_pushnumber(L, (lua_Number)arg2);
return 1;
}
else if(argset == 2)
{
if(arg3_idx)
lua_pushvalue(L, arg3_idx);
else
luaT_pushudata(L, arg3, "torch.CampTensor");
THCampTensor_mean(arg3,arg4,arg5);
return 1;
}
return 0;
}

static int clamptorch_CampTensor_var(lua_State *L)
{
int narg = lua_gettop(L);
THCampTensor *arg1 = NULL;
float arg2 = 0;
if(narg == 1
&& (arg1 = luaT_toudata(L, 1, "torch.CampTensor"))
)
{
}
else
luaL_error(L, "expected arguments: CampTensor");
arg2 = THCampTensor_varall(arg1);
lua_pushnumber(L, (lua_Number)arg2);
return 1;
}

static int clamptorch_CampTensor_std(lua_State *L)
{
int narg = lua_gettop(L);
THCampTensor *arg1 = NULL;
float arg2 = 0;
if(narg == 1
&& (arg1 = luaT_toudata(L, 1, "torch.CampTensor"))
)
{
}
else
luaL_error(L, "expected arguments: CampTensor");
arg2 = THCampTensor_stdall(arg1);
lua_pushnumber(L, (lua_Number)arg2);
return 1;
}

static int clamptorch_CampTensor_norm(lua_State *L)
{
int narg = lua_gettop(L);
int argset = 0;
THCampTensor *arg1 = NULL;
float arg2 = 2;
float arg3 = 0;
THCampTensor *arg4 = NULL;
int arg4_idx = 0;
THCampTensor *arg5 = NULL;
float arg6 = 0;
long arg7 = 0;
if(narg == 1
&& (arg1 = luaT_toudata(L, 1, "torch.CampTensor"))
)
{
argset = 1;
}
else if(narg == 2
&& (arg1 = luaT_toudata(L, 1, "torch.CampTensor"))
&& lua_isnumber(L, 2)
)
{
argset = 1;
arg2 = (float)lua_tonumber(L, 2);
}
else if(narg == 3
&& (arg5 = luaT_toudata(L, 1, "torch.CampTensor"))
&& lua_isnumber(L, 2)
&& lua_isnumber(L, 3)
)
{
argset = 2;
arg6 = (float)lua_tonumber(L, 2);
arg7 = (long)lua_tonumber(L, 3)-1;
arg4 = THCampTensor_new();
}
else if(narg == 4
&& (arg4 = luaT_toudata(L, 1, "torch.CampTensor"))
&& (arg5 = luaT_toudata(L, 2, "torch.CampTensor"))
&& lua_isnumber(L, 3)
&& lua_isnumber(L, 4)
)
{
argset = 2;
arg4_idx = 1;
arg6 = (float)lua_tonumber(L, 3);
arg7 = (long)lua_tonumber(L, 4)-1;
}
else
luaL_error(L, "expected arguments: CampTensor [float] | [*CampTensor*] CampTensor float index");
if(argset == 1)
{
arg3 = THCampTensor_normall(arg1,arg2);
lua_pushnumber(L, (lua_Number)arg3);
return 1;
}
else if(argset == 2)
{
if(arg4_idx)
lua_pushvalue(L, arg4_idx);
else
luaT_pushudata(L, arg4, "torch.CampTensor");
THCampTensor_norm(arg4,arg5,arg6,arg7);
return 1;
}
return 0;
}

static int clamptorch_CampTensor_renorm(lua_State *L)
{
int narg = lua_gettop(L);
THCampTensor *arg1 = NULL;
int arg1_idx = 0;
THCampTensor *arg2 = NULL;
float arg3 = 0;
long arg4 = 0;
float arg5 = 0;
if(narg == 4
&& (arg1 = luaT_toudata(L, 1, "torch.CampTensor"))
&& lua_isnumber(L, 2)
&& lua_isnumber(L, 3)
&& lua_isnumber(L, 4)
)
{
arg1_idx = 1;
arg3 = (float)lua_tonumber(L, 2);
arg4 = (long)lua_tonumber(L, 3)-1;
arg5 = (float)lua_tonumber(L, 4);
arg2 = arg1;
}
else if(narg == 5
&& (arg1 = luaT_toudata(L, 1, "torch.CampTensor"))
&& (arg2 = luaT_toudata(L, 2, "torch.CampTensor"))
&& lua_isnumber(L, 3)
&& lua_isnumber(L, 4)
&& lua_isnumber(L, 5)
)
{
arg1_idx = 1;
arg3 = (float)lua_tonumber(L, 3);
arg4 = (long)lua_tonumber(L, 4)-1;
arg5 = (float)lua_tonumber(L, 5);
}
else
luaL_error(L, "expected arguments: *CampTensor* [CampTensor] float index float");
lua_pushvalue(L, arg1_idx);
THCampTensor_renorm(arg1,arg2,arg3,arg4,arg5);
return 1;
}

static int clamptorch_CampTensor_dist(lua_State *L)
{
int narg = lua_gettop(L);
THCampTensor *arg1 = NULL;
THCampTensor *arg2 = NULL;
float arg3 = 2;
float arg4 = 0;
if(narg == 2
&& (arg1 = luaT_toudata(L, 1, "torch.CampTensor"))
&& (arg2 = luaT_toudata(L, 2, "torch.CampTensor"))
)
{
}
else if(narg == 3
&& (arg1 = luaT_toudata(L, 1, "torch.CampTensor"))
&& (arg2 = luaT_toudata(L, 2, "torch.CampTensor"))
&& lua_isnumber(L, 3)
)
{
arg3 = (float)lua_tonumber(L, 3);
}
else
luaL_error(L, "expected arguments: CampTensor CampTensor [float]");
arg4 = THCampTensor_dist(arg1,arg2,arg3);
lua_pushnumber(L, (lua_Number)arg4);
return 1;
}

static int clamptorch_CampTensor_sign(lua_State *L)
{
int narg = lua_gettop(L);
THCampTensor *arg1 = NULL;
int arg1_idx = 0;
THCampTensor *arg2 = NULL;
if(narg == 1
&& (arg1 = luaT_toudata(L, 1, "torch.CampTensor"))
)
{
arg1_idx = 1;
arg2 = arg1;
}
else if(narg == 2
&& (arg1 = luaT_toudata(L, 1, "torch.CampTensor"))
&& (arg2 = luaT_toudata(L, 2, "torch.CampTensor"))
)
{
arg1_idx = 1;
}
else
luaL_error(L, "expected arguments: *CampTensor* [CampTensor]");
lua_pushvalue(L, arg1_idx);
THCampTensor_sign(arg1,arg2);
return 1;
}

static const struct luaL_Reg clamptorch_CampTensorMath__ [] = {
{"zero", clamptorch_CampTensor_zero},
{"fill", clamptorch_CampTensor_fill},
{"add", clamptorch_CampTensor_add},
{"mul", clamptorch_CampTensor_mul},
{"div", clamptorch_CampTensor_div},
{"cmul", clamptorch_CampTensor_cmul},
{"cdiv", clamptorch_CampTensor_cdiv},
{"addcmul", clamptorch_CampTensor_addcmul},
{"addcdiv", clamptorch_CampTensor_addcdiv},
{"dot", clamptorch_CampTensor_dot},
{"min", clamptorch_CampTensor_min},
{"max", clamptorch_CampTensor_max},
{"sum", clamptorch_CampTensor_sum},
{"addmv", clamptorch_CampTensor_addmv},
{"addmm", clamptorch_CampTensor_addmm},
{"addr", clamptorch_CampTensor_addr},
{"log", clamptorch_CampTensor_log},
{"log1p", clamptorch_CampTensor_log1p},
{"exp", clamptorch_CampTensor_exp},
{"cos", clamptorch_CampTensor_cos},
{"acos", clamptorch_CampTensor_acos},
{"cosh", clamptorch_CampTensor_cosh},
{"sin", clamptorch_CampTensor_sin},
{"asin", clamptorch_CampTensor_asin},
{"sinh", clamptorch_CampTensor_sinh},
{"tan", clamptorch_CampTensor_tan},
{"atan", clamptorch_CampTensor_atan},
{"tanh", clamptorch_CampTensor_tanh},
{"sqrt", clamptorch_CampTensor_sqrt},
{"ceil", clamptorch_CampTensor_ceil},
{"floor", clamptorch_CampTensor_floor},
{"abs", clamptorch_CampTensor_abs},
{"pow", clamptorch_CampTensor_pow},
{"lt", clamptorch_CampTensor_lt},
{"gt", clamptorch_CampTensor_gt},
{"le", clamptorch_CampTensor_le},
{"ge", clamptorch_CampTensor_ge},
{"eq", clamptorch_CampTensor_eq},
{"ne", clamptorch_CampTensor_ne},
{"geometric", clamptorch_CampTensor_geometric},
{"bernoulli", clamptorch_CampTensor_bernoulli},
{"uniform", clamptorch_CampTensor_uniform},
{"normal", clamptorch_CampTensor_normal},
{"cauchy", clamptorch_CampTensor_cauchy},
{"logNormal", clamptorch_CampTensor_logNormal},
{"exponential", clamptorch_CampTensor_exponential},
{"mean", clamptorch_CampTensor_mean},
{"var", clamptorch_CampTensor_var},
{"std", clamptorch_CampTensor_std},
{"norm", clamptorch_CampTensor_norm},
{"renorm", clamptorch_CampTensor_renorm},
{"dist", clamptorch_CampTensor_dist},
{"sign", clamptorch_CampTensor_sign},
{NULL, NULL}
};

void clamptorch_CampTensorMath_init(lua_State *L)
{
  luaT_pushmetatable(L, "torch.CampTensor");
  luaL_register(L, NULL, clamptorch_CampTensorMath__);
  lua_pop(L, 1);
}
